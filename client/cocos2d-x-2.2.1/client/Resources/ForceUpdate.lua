------------------------------------------------------------------------ 作者：hezhr-- 日期：2014-10-08-- 描述：强制更新----------------------------------------------------------------------local CHECK_FORCE_FILE = "CheckForce.json"	-- 强制更新校验文件local mUpdateEndCallback = nil				-- 更新结束回调local mUpdateHandler = nil					-- 每帧更新句柄local mRootNode = nil------------------------------------------------------------------------ 检查是否需要强制更新local function checkForceUpdate(curVersion, forceVersion)	if curVersion == forceVersion then		return false	end	curVersion = string.gsub(curVersion, "%.", "")	forceVersion = string.gsub(forceVersion, "%.", "")	local curLength = string.len(curVersion)	local forceLength = string.len(forceVersion)	for i=1, forceLength do		if i > curLength then			if string.byte(forceVersion, i) > 48 then				return true			end		else			if string.byte(forceVersion, i) > string.byte(curVersion, i) then				return true			elseif string.byte(forceVersion, i) < string.byte(curVersion, i) then				return false			end		end	end	return falseend------------------------------------------------------------------------ 单个文件下载进度function ForceUpdate_onProgress(fileURL, buffer, totalSize, curSize)	-- cclog("force update on progress, fileURL: "..fileURL..", buffer: "..buffer..", totalSize: "..totalSize..", curSize: "..curSize)end------------------------------------------------------------------------ 文件列表下载进度function ForceUpdate_onTotalProgress(fileURL, buffer, totalCount, curCount)	-- cclog("force update on total progress, fileURL: "..fileURL..", buffer: "..buffer..", totalCount: "..totalCount..", curCount: "..curCount)end------------------------------------------------------------------------ 单个文件下载完成function ForceUpdate_onSuccess(fileURL, buffer)	-- cclog("force update on success, fileURL: "..fileURL..", buffer: "..buffer)end------------------------------------------------------------------------ 所有文件下载完成function ForceUpdate_onTotalSuccess(fileURL, buffer)	cclog("force update on total success, fileURL: "..fileURL..", buffer: "..buffer)	local infos = require("json").decode(getFileString(CHECK_FORCE_FILE))	for key, val in pairs(infos) do		if true == checkForceUpdate(GAME_VERSION, key) then			local forceURL = val[ChannelProxy.getChannelId()] or ""			cclog("force update on total success, cur version: "..GAME_VERSION..", force version: "..key..", force url: "..forceURL)			if true == CONFIG["update_show_error_log"] then				ForceUpdate_showTipPanel("当前发现新版本，请点击开始下载："..forceURL, forceURL)			else				ForceUpdate_showTipPanel("当前发现新版本，请点击开始下载", forceURL)			end			return		end	end	ForceUpdate_end()end------------------------------------------------------------------------ 文件下载出错function ForceUpdate_onError(fileURL, errorBuffer)	cclog("force update on error, fileURL: "..fileURL..", errorBuffer: "..errorBuffer)	if true == CONFIG["update_show_error_log"] then		local infos = require("json").decode(errorBuffer)		local tipText = "更新检查失败"		tipText = tipText.."\n"..infos["url"]		tipText = tipText.."\n"..infos["curl_code"]		tipText = tipText..","..infos["response_code"]		tipText = tipText.."\n"..infos["error"]		ForceUpdate_showTipPanel(tipText, nil)	else		ForceUpdate_showTipPanel("更新检查失败，请重新检查更新", nil)	endend------------------------------------------------------------------------ 每帧更新function ForceUpdate_update(dt)	ResDownload.listen()end------------------------------------------------------------------------ 执行更新function ForceUpdate_excute()	local listenerTable = 	{		"ForceUpdate_onProgress",		"ForceUpdate_onTotalProgress",		"ForceUpdate_onSuccess",		"ForceUpdate_onTotalSuccess",		"ForceUpdate_onError"	}	for key, value in pairs(listenerTable) do		ResDownload.addListener(key, value)	end	ResDownload.excute(CONFIG["update_url"]..CHECK_FORCE_FILE)end------------------------------------------------------------------------ 开始更新function ForceUpdate_start(callback)	mUpdateEndCallback = callback	mRootNode = CCScene:create()	if nil == CCDirector:sharedDirector():getRunningScene() then		CCDirector:sharedDirector():runWithScene(mRootNode)	else		CCDirector:sharedDirector():replaceScene(mRootNode)	end	mUpdateHandler = CCDirector:sharedDirector():getScheduler():scheduleScriptFunc(ForceUpdate_update, 0, false)	ForceUpdate_createUI()	ForceUpdate_excute()end------------------------------------------------------------------------ 更新结束function ForceUpdate_end()	CCDirector:sharedDirector():getScheduler():unscheduleScriptEntry(mUpdateHandler)	if "function" == type(mUpdateEndCallback) then		mUpdateEndCallback()		mUpdateEndCallback = nil	endend------------------------------------------------------------------------ 创建更新界面function ForceUpdate_createUI()	local winSize = CCDirector:sharedDirector():getWinSize()	local ui = CCLayer:create()	mRootNode:addChild(ui)	local backgroundSprite = CCSprite:create("Register.png")	backgroundSprite:setAnchorPoint(ccp(0.5, 0.5))	backgroundSprite:setPosition(ccp(winSize.width/2, winSize.height/2))	ui:addChild(backgroundSprite)end------------------------------------------------------------------------ 显示弹出框function ForceUpdate_showTipPanel(tipText, forceURL)	local tipLabel = nil	local tipPanelRoot = tolua.cast(mRootNode:getChildByTag(10000), "UILayer")	if nil == tipPanelRoot then		tipPanelRoot = UILayer:create()		tipPanelRoot:setTag(10000)		mRootNode:addChild(tipPanelRoot)		-- 背景框		local tipPanel = UIImageView:create()		tipPanel:loadTexture("au_tip_panel.png")		tipPanel:setScale9Enabled(true)		tipPanel:setCapInsets(CCRectMake(85, 85, 1, 1))		tipPanel:setSize(CCSizeMake(420, 260))		tipPanel:setAnchorPoint(ccp(0.5, 0.5))		tipPanel:setPosition(ccp(320, 480))		tipPanelRoot:addWidget(tipPanel)		-- 提示文本		tipLabel = UILabel:create()		tipLabel:setFontName("Arial")		tipLabel:setFontSize(22)		tipLabel:setColor(ccc3(255, 255, 255))		tipLabel:setTextAreaSize(CCSizeMake(350, 175))		tipLabel:setTextVerticalAlignment(kCCVerticalTextAlignmentCenter)		tipLabel:setTextHorizontalAlignment(kCCTextAlignmentLeft)		tipLabel:setAnchorPoint(ccp(0.5, 1.0))		tipLabel:setPosition(ccp(330, 625))		tipLabel:setName("tip_label")		tipPanelRoot:addWidget(tipLabel)		-- 更新按钮		local updateButton = UIButton:create()		updateButton:loadTextureNormal("au_execute_btn.png", UI_TEX_TYPE_LOCAL)		updateButton:loadTexturePressed("au_execute_btn.png", UI_TEX_TYPE_LOCAL)		if nil == forceURL then			updateButton:setTitleText("重新检测")		else			updateButton:setTitleText("开始下载")		end		updateButton:setTitleFontSize(26)		updateButton:setPosition(ccp(320, 425))		updateButton:setTouchEnabled(true)		updateButton:registerEventScript(function(typename, widget)			if "releaseUp" == typename then				if nil == forceURL then					tipPanelRoot:setVisible(false)					ForceUpdate_excute()				else					ChannelProxy.openURL(forceURL, false)				end			end		end)		tipPanelRoot:addWidget(updateButton)	end	tipLabel = tolua.cast(tipPanelRoot:getWidgetByName("tip_label"), "UILabel")	tipLabel:setText(tipText)	tipPanelRoot:setVisible(true)end----------------------------------------------------------------------