------------------------------------------------------------------------ 作者: lewis hamilton-- 日期: 2014-05-13-- 描述: 界面引导引擎----------------------------------------------------------------------GuideUIEngine = {}local mHandle = nil				-- 新手引导组处理句柄local mIsForce = true			-- 是否是强制引导local mGuideIndex = 0			-- 引导步骤索引local mUpdateID = nil			-- 每帧监听idlocal mbShoudUpdate = false		-- 是否需要更新local mCurrentEvnir = {}		-- 当前环境表local mExcuteFuncTB = {}		-- 消息执行函数local mEffectiveMsgTB = {}		-- 感兴趣的消息表local mCorrectClick = true		-- 是否点击了正确的地方local mLastMessage = nil		-- 上一条消息local mLastMessageTime = 0		-- 上一条消息的接收时间local mFrame = nillocal mArrow = nillocal mTitle = nil-- 获取按钮节点local function getBtnNode(rootTag, parentName, nodeName)	local root = nil	if "UI_BATTLE" == rootTag then		-- 战斗界面		root = LayerGameUI.mRootView	else								-- 普通界面		rootTag = rootTag or "UI_Main"		root = UIManager.findLayerByTag(rootTag)	end	if nil == root then		cclog("guide ui engine, can't get root '"..rootTag.."'")		return nil, nil, nil	end	local parent = root:getWidgetByName(parentName)	if nil == parent then		cclog("guide ui engine, can't get parent '"..parentName.."'")		return root, nil, nil	end	local node = parent:getChildByName(nodeName)	if nil == node then		cclog("guide ui engine can't get node '"..nodeName.."'")		return root, parent, nil	end	if false == node:isTouchEnabled() and true == mCurrentEvnir.isTouchEnabledCheck then		return root, parent, nil	end	return root, parent, nodeend-- 创建标题local function createTitle(titleText, arrowDirect, pos)	if nil == titleText or "" == titleText then		return	end	--	local titleLabel = UILabelBMFont:create()	titleLabel:setFntFile("guide_title.fnt")	titleLabel:setColor(ccc3(254, 207, 2))	titleLabel:setText(titleText)	titleLabel:setAnchorPoint(ccp(0.5, 0.5))	titleLabel:setPosition(ccp(0, 2))	--	local contentSize = titleLabel:getContentSize()	local preferredWidth = contentSize.width + 50	local preferredHeight = 57	--	local titleBg = UIImageView:create()	titleBg:loadTexture("bg_zhiyin.png")	titleBg:setScale9Enabled(true)	titleBg:setCapInsets(CCRectMake(93, 32, 1, 1))	titleBg:setSize(CCSizeMake(preferredWidth, preferredHeight))	titleBg:setAnchorPoint(ccp(0.5, 0.5))	if "left" == arrowDirect then		pos = ccpAdd(pos, ccp(preferredWidth/2, 0))	elseif "up" == arrowDirect then		pos = ccpAdd(pos, ccp(0, -preferredHeight/2))	elseif "right" == arrowDirect then		pos = ccpAdd(pos, ccp(-preferredWidth/2, 0))	else	-- "down"		pos = ccpAdd(pos, ccp(0, preferredHeight/2))	end	titleBg:setPosition(pos)	titleBg:setZOrder(1000)	titleBg:addChild(titleLabel)	titleBg:runAction(CCRepeatForever:create(CCSequence:createWithTwoActions(CCScaleTo:create(0.3, 0.9), CCScaleTo:create(0.325, 1.1))))	return titleBgend-- 隐藏高亮框和箭头local function hideTip()	if tolua.cast(mFrame, "UIImageView") then		mFrame:removeFromParent()	end	mFrame = nil	if tolua.cast(mArrow, "UIImageView") then		mArrow:removeFromParent()	end	mArrow = nil	if tolua.cast(mTitle, "UILabelBMFont") then		mTitle:removeFromParent()	end	mTitle = nilend-- 显示高亮框和箭头local function showTip(title)	if nil == mCurrentEvnir then		return	end	local _, parent, node = getBtnNode(mCurrentEvnir.config.root_tag, mCurrentEvnir.parentName, mCurrentEvnir.nodeName)	if nil == node then		return	end	hideTip()	local rect = node:getVirtualRenderer():boundingBox()	local anchorPoint = node:getAnchorPoint()	mFrame = TipModule.showFrame(node, nil, CCSizeMake(rect.size.width + 2, rect.size.height + 2), ccp(0, 0), true)	mFrame:setAnchorPoint(anchorPoint)	local pos = CommonFunc_getRelativePos(parent, mCurrentEvnir.parentScrollView, mFrame, nil)	pos.x = pos.x - rect.size.width*(anchorPoint.x - 0.5)	pos.y = pos.y - rect.size.height*(anchorPoint.y - 0.5)	local titlePos = ccp(pos.x, pos.y)	if "left" == mCurrentEvnir.config.direct then		pos.x = pos.x + rect.size.width/2		titlePos.x = pos.x + 110	elseif "up" == mCurrentEvnir.config.direct then		pos.y = pos.y - rect.size.height/2		titlePos.y = pos.y - 120	elseif "right" == mCurrentEvnir.config.direct then		pos.x = pos.x - rect.size.width/2		titlePos.x = pos.x - 110	else	-- "down"		pos.y = pos.y + rect.size.height/2		titlePos.y = pos.y + 110	end	mArrow = TipModule.showArrow(parent, nil, mCurrentEvnir.config.direct, pos, true)	if title then		mTitle = createTitle(title, mCurrentEvnir.config.direct, titlePos)		parent:addChild(mTitle)	endend-- 文本IDlocal function getTextId()	return mHandle.id * 100 + mGuideIndexend-- 生成一个新的环境local function newEvnir()	mCurrentEvnir = {}	mCurrentEvnir.oldPos = ccp(0, 0)	-- 旧位置	mCurrentEvnir.isStatic = false		-- 是否静止(即已经播放完动画)end-- 是否为感兴趣的消息local function isExsitMsg(msg)	for key, value in pairs(mEffectiveMsgTB) do		if value == msg then			return true		end	end	return falseend-- 每帧监听local function guideUpdate(dt)	if false == mbShoudUpdate or nil == mCurrentEvnir or true == NetSendLoadLayer.isWaitMessage() then		return	end	local _, _, node = getBtnNode(mCurrentEvnir.config.root_tag, mCurrentEvnir.parentName, mCurrentEvnir.nodeName)	if nil == node then		GuideView.reset()		return	end	local pos = node:getWorldPosition()	local oldPos = mCurrentEvnir.oldPos	if pos.x ~= oldPos.x or pos.y ~= oldPos.y then		if false == mCurrentEvnir.isStatic then			GuideView.reset()			mCurrentEvnir.oldPos = pos			return		else			GuideView.updatePos(pos, mCurrentEvnir.config.direct)		end	end	if false == mCurrentEvnir.isStatic then		local anPos = node:getAnchorPoint()		local rect = node:getVirtualRenderer():boundingBox()		pos.y = pos.y - rect.size.height*(anPos.y - 0.5)		pos.x = pos.x - rect.size.width*(anPos.x - 0.5)		GuideView.updateSize(rect.size.width, rect.size.height, true)		GuideView.updateLock(mCurrentEvnir.config.lock)		GuideView.updateText(mCurrentEvnir.textId)		GuideView.updatePos(pos, mCurrentEvnir.config.direct)		mCurrentEvnir.isStatic = true	endend-- 开启function GuideUIEngine.guideStart(handle, isForceFlag)	mHandle = handle	mGuideIndex = 0	mbShoudUpdate = false	mCorrectClick = true	GuideMgr.setGuideEngine(GuideUIEngine)	if true == isForceFlag then		GuideUIEngine.openForce()	else		mIsForce = false		GuideUIEngine.excute()	endend-- 结束function GuideUIEngine.guideEnd(doSave)	if mHandle then		if true == doSave and true == mCorrectClick then			GuideMgr.save(mHandle.id)		end		mHandle = nil	end	hideTip()	GuideMgr.setGuideEngine(nil)	GuideUIEngine.closeForce()end-- 是否是强制引导function GuideUIEngine.isForce()	return mIsForceend-- 执行function GuideUIEngine.excute()	if nil == mHandle then		return	end	mGuideIndex = mGuideIndex + 1	mbShoudUpdate = false	mCurrentEvnir = nil	mEffectiveMsgTB = {}	local config = mHandle["config"][mGuideIndex]	if nil == config then		GuideUIEngine.guideEnd(true)		return	end	mExcuteFuncTB[config.cmd](config)	-- 在主界面,针对功能解锁做特殊处理	if mHandle and mHandle["ui_condition"] then		for key, value in pairs(mHandle["ui_condition"]) do			if "ui_main" == value then				if false == CopyDelockLogic.judgeVONInMain() and false == CopyDelockLogic.isStartShowUI() then					GuideUIEngine.onMessage("click_copy_delock")				end				break			end		end	endend-- 接收消息function GuideUIEngine.onMessage(msg, param)	-- 消息过滤	if nil == mCurrentEvnir then		return	end	local currTime = system_gettime()	if msg == mLastMessage and currTime - mLastMessageTime < 0.5 then		return	end	mLastMessage = msg	mLastMessageTime = currTime	-- 消息验证	if true == isExsitMsg("on_click_btn") then		if "on_click_btn" ~= msg then			return		end		mCorrectClick = param:getName() == mCurrentEvnir.nodeName	else		if mIsForce then			mCorrectClick = isExsitMsg(msg)		else			mCorrectClick = msg == mCurrentEvnir.config.msg		end	end	if mCorrectClick then		GuideUIEngine.excute()	else		if false == mIsForce then			GuideUIEngine.guideEnd(false)		end	endend-- 开启强制function GuideUIEngine.openForce()	if mUpdateID then		return	end	mIsForce = true	mUpdateID = CCDirector:sharedDirector():getScheduler():scheduleScriptFunc(guideUpdate, 0, false)	GuideView.create()	GuideUIEngine.excute()end-- 关闭强制function GuideUIEngine.closeForce()	if nil == mUpdateID then		return	end	mIsForce = false	CCDirector:sharedDirector():getScheduler():unscheduleScriptEntry(mUpdateID)	mUpdateID = nil	GuideView.cleanup()	GuideUIEngine.excute()end-- 延迟function GuideUIEngine.delay(config)	newEvnir()	GuideView.reset()	local paramTB = GuideMgr.parseParamer(config.param)	local timecount = tonumber(paramTB["time"])	GuideView.updateLock(config.lock)	mCurrentEvnir.config = config	mEffectiveMsgTB = {"on_delay"}	CreateTimer(timecount, 1, nil, function(tm) GuideUIEngine.onMessage("on_delay") end).start()end-- 等候消息function GuideUIEngine.waitMsg(config)	newEvnir()	GuideView.reset()	GuideView.updateLock(config.lock)	mCurrentEvnir.config = config	mEffectiveMsgTB = {config.msg or "on_wait_msg"}end-- 点击按钮function GuideUIEngine.clickBtn(config)	newEvnir()	GuideView.reset()	mbShoudUpdate = true	local paramTB = GuideMgr.parseParamer(config.param)	local parentName = paramTB["parent_name"]	local parentScrollView = paramTB["parent_scrollview"]	local nodeName = paramTB["node_name"]	if "table" == type(config.funcs) then		if "function" == type(config.funcs[parentName]) then			parentName = config.funcs[parentName]()		end		if "function" == type(config.funcs[nodeName]) then			nodeName = config.funcs[nodeName]()		end		if nil == parentName or nil == nodeName then			GuideUIEngine.guideEnd(doSave)			return		end	end	mCurrentEvnir.parentName = parentName	mCurrentEvnir.parentScrollView = parentScrollView	mCurrentEvnir.nodeName = nodeName	mCurrentEvnir.config = config	mCurrentEvnir.textId = getTextId()	mCurrentEvnir.isTouchEnabledCheck = true	mEffectiveMsgTB = {config.msg or "on_click_btn"}	if false == mIsForce then		mCurrentEvnir.isTouchEnabledCheck = false		showTip(GameString.get(config.title))	endend-- 主角说话提示function GuideUIEngine.talk(config)	newEvnir()	GuideView.reset()	local paramTB = GuideMgr.parseParamer(config.param)	local width = paramTB["width"]	local height = paramTB["height"]	local x = paramTB["x"]	local y = paramTB["y"]	if width and height and x and y then		GuideView.updateSize(width, height, false)		GuideView.updatePos(ccp(x, y), config.direct,config.icon)	else		GuideView.updatePos(ccp(360, config.posy or 420), config.direct,config.icon)	end	GuideView.updateLock(config.lock)	GuideView.updateText(getTextId())	mCurrentEvnir.config = config	mEffectiveMsgTB = {"on_touch"}end-- 空操作function GuideUIEngine.none(config)	GuideUIEngine.excute()endmExcuteFuncTB["force"]				= GuideUIEngine.openForcemExcuteFuncTB["unforce"]			= GuideUIEngine.closeForcemExcuteFuncTB["delay"]				= GuideUIEngine.delaymExcuteFuncTB["wait_msg"]			= GuideUIEngine.waitMsgmExcuteFuncTB["click_btn"]			= GuideUIEngine.clickBtnmExcuteFuncTB["talk"]				= GuideUIEngine.talkmExcuteFuncTB["none"]				= GuideUIEngine.none