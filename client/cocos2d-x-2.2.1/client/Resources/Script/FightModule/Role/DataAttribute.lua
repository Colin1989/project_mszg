------------------------------------------------------------------------ 作者：lewis-- 日期：2013-3-31-- 描述：角色基本属性数据----------------------------------------------------------------------DataAttribute = class()--暴击,闪避转换公式function transform_1(value)	return math.floor(value / (value + 200) / 2 * 100 + 0.5)end--命中,韧性转换公式function transform_2(value)	return math.floor(value / (value + 200) / 1.5 * 100 + 0.5)end--（1+（攻方等级-受方等级-2）*3%），function damageCoe(attacker,denfer)    local coe = 0.0    local attackLv = attacker:getConfig("role_level")    local defnerlv = denfer:getConfig("role_level")    --<=2级 没有等级压制    if math.abs(attackLv - defnerlv) <= 2 then         return 1.0    end     local kx = 0.03     --邓子需求    if FightDateCache.PVEorPVP() == "PVP" then         kx = 0.01    else         kx = 0.03    end     if attackLv < defnerlv then         kx = -kx    end        coe = 1 + (math.abs(attackLv- defnerlv) - 2) * kx    if  coe < 0  then coe = 0 end     if  coe > 4  then coe = 4 end     return coeend --属性名字映射表local mAttrMappingName = {}mAttrMappingName["life"] 				= 1mAttrMappingName["atk"] 				= 2mAttrMappingName["speed"] 				= 3mAttrMappingName["hit_ratio"] 			= 4mAttrMappingName["critical_ratio"] 		= 5mAttrMappingName["miss_ratio"] 			= 6mAttrMappingName["tenacity"] 			= 7--构造函数function DataAttribute:ctor()	self.mStatus				= nil	self.currentAttr			= {}		--当前属性	self.maxAttr				= {}		--上限属性	self.originalAttr			= {}		--原始属性	self.hitPoints				= 0			--实际的生命值	for i = 1, 7 do		self.originalAttr[i] = 0		self.maxAttr[i] = 0		self.currentAttr[i] = 0	end	self.franticAtkAdd = 0		--狂化增加的攻击endfunction DataAttribute:init(status)	self.mStatus = statusendfunction DataAttribute:remianRate(key)   local cur =  self.currentAttr[mAttrMappingName[key]]   local total =  self.maxAttr[mAttrMappingName[key]]    local rate = cur/total *100   return rateend --初始化原始数据function DataAttribute:initOriginalAttr(data)	self.originalAttr[1] = data.life	self.originalAttr[2] = data.atk	self.originalAttr[3] = data.speed	self.originalAttr[4] = data.hit_ratio	self.originalAttr[5] = data.critical_ratio	self.originalAttr[6] = data.miss_ratio	self.originalAttr[7] = data.tenacityend--初始化当前数据function DataAttribute:initCurrentAttr()	self.currentAttr[1] = self.originalAttr[1]	self.currentAttr[2] = self.originalAttr[2]	self.currentAttr[3] = self.originalAttr[3]	self.currentAttr[4] = transform_2(self.originalAttr[4])	self.currentAttr[5] = transform_1(self.originalAttr[5])	self.currentAttr[6] = transform_1(self.originalAttr[6])	self.currentAttr[7] = transform_2(self.originalAttr[7])endfunction DataAttribute:initCurrentLife(curLife)    self.currentAttr[1] = curLife     self.hitPoints = curLifeend function DataAttribute:showCurrentLife()    self.currentAttr[1] = self.hitPoints     print("self.currentAttr[1]",self.currentAttr[1])end --初始化上限数据function DataAttribute:restoreAttribute()	for key, value in pairs(self.currentAttr) do		self.maxAttr[key] = value	end	self.hitPoints = self.currentAttr[1]end--通过属性名获得 <当前属性>属性function DataAttribute:getByName(name)	local idx = mAttrMappingName[name]	if idx == nil then		print("get attribute with invalid name", name)		return 0	end    if self.currentAttr[idx] < 0 then         return 0    end 	return self.currentAttr[idx]end--通过索引function DataAttribute:getByIndex(idx)    if self.currentAttr[idx] < 0 then         return 0    end 	return self.currentAttr[idx]end--通过idx修改属性值function DataAttribute:modifiedByIdx(idx, modifyValue)    local realModifyValue = self:realModifyByIdx(idx, modifyValue)

	self.currentAttr[idx] = self.currentAttr[idx] + realModifyValue    return realModifyValueend--获取实际修改值function DataAttribute:realModifyByIdx(idx, modifyValue)	local bHighLimit = (idx == 1) --生命要判定上限	--local bLowLimit = 0			--下限    local result = self.currentAttr[idx] + modifyValue    local tmp = modifyValue	--if result < bLowLimit then    --去掉下限的判断        --tmp = -self.currentAttr[idx]	if bHighLimit and result > self.maxAttr[idx] then        tmp = self.maxAttr[idx] - self.currentAttr[idx]	end    return tmpend --通过属性名称改变属性值function DataAttribute:modifiedWithName(name, modifyValue)	local idx = mAttrMappingName[name]	if idx == nil then		print("get attribute with invalid name", name)		return 0	end	return self:modifiedByIdx(idx, modifyValue)end--获取上限值function DataAttribute:getMaxAttrWithName(name)	local idx = mAttrMappingName[name]	if idx == nil then		print("get attribute with invalid name", name)		return 0	end	return self.maxAttr[idx]end--通过idx修改属性值function DataAttribute:modifiedMaxAttrByName(name, percentage)    local idx = mAttrMappingName[name]	if idx == nil then		print("get attribute with invalid name", name)		return 0	end    self.maxAttr[idx] = math.ceil(self.maxAttr[idx] * percentage)	self.currentAttr[idx] = self.maxAttr[idx]end--通过属性名称改变属性值function DataAttribute:modifiedByName(name, value, isPercentage, bOn)	local idx = mAttrMappingName[name]	if idx == nil then		return 0	end		local mValue = value	if idx <= 3 then	--生命速度攻击要算百分比		if isPercentage then			mValue = math.ceil(self.maxAttr[idx] * value / 100.0)		end	end       if bOn == false then		mValue = -mValue	end	self:modifiedByIdx(idx, mValue)end--计算修改的属性值function DataAttribute:calcModifiedValue(name, value, isPercentage)	local idx = mAttrMappingName[name]	if idx == nil then		return 0	end	local mValue = value	if idx <= 3 then	--生命速度攻击要算百分比		if isPercentage then			mValue = math.ceil(self.originalAttr[idx] * value / 100.0)		end	end	return mValueend--改变真实生命值function DataAttribute:modifiedHitPoints(value)	self.hitPoints = self.hitPoints + value	if self.hitPoints < 0 then		self.hitPoints = 0	elseif self.hitPoints > self.maxAttr[1] then		self.hitPoints = self.maxAttr[1]	endendfunction DataAttribute:getHitPoints()	return self.hitPointsendlocal function clamp(low, high, value)	if value < low then		return low	elseif value > high then		return high	else		return value	endendlocal function clamp_1(value)	return clamp(0, 100, value)end--对战的数值计算function DataAttribute:attack(defender)	local hitRatio		= self:getByName("hit_ratio")	local criticalRatio	= self:getByName("critical_ratio")	local missRatio		= defender:getByName("miss_ratio")	local tenacity		= defender:getByName("tenacity")	local status = defender.mStatus	if status:getStatus("hex") ~= 0 or status:getStatus("uncontrollable") then --or status:getStatus("disarm") then		missRatio = 0		tenacity = 0	end	local miss	 = clamp_1(math.ceil(((100 - hitRatio) * missRatio ) / 100))	local crit	 = clamp_1(math.ceil(((100 - tenacity) * criticalRatio ) / 100))	local hit	 = clamp_1(100 - (miss + crit))	--print(hitRatio, criticalRatio, missRatio, tenacity, "miss", miss, "crit", crit, "hit", hit)	local rand = math.random(0, 100)	if rand < miss then		return "miss"	elseif rand < miss + crit then		return "crit"	end	--return "miss"	return "hit"end--获得label颜色function DataAttribute:getColor(idx)	--生命要特别判定	if idx == 1 then		local life = self.mStatus:getStatus("life")		if life > 0 then			return "green"		elseif life < 0 then			return "red"		elseif self.currentAttr[idx] > self.maxAttr[idx] then	--比基础高			return "green"			elseif self.maxAttr[idx] > self.originalAttr[idx] then--祝福影响			return "green"		end		return "white"	end	if self.maxAttr[idx] > self.originalAttr[idx] then--祝福影响		return "green"	elseif self.currentAttr[idx] > self.maxAttr[idx] then	--比基础高		return "green"		elseif self.currentAttr[idx] < self.maxAttr[idx] then	--比基础低		return "red"	end	return "white"end--重生,生命值重置function DataAttribute:respawn(life, atk)	--生命值	self.originalAttr[1] = math.ceil(self.originalAttr[1])	self.maxAttr[1] = self.originalAttr[1]	self.currentAttr[1] = self.originalAttr[1]	self.hitPoints = self.currentAttr[1]end--function DataAttribute:respawnWithRate(life, atk)	self.originalAttr[1] = math.ceil(self.originalAttr[1] * life)	self.maxAttr[1] = self.originalAttr[1]	self.currentAttr[1] = self.originalAttr[1]	self.hitPoints = self.currentAttr[1]		self.maxAttr[2] = math.ceil(self.maxAttr[2] * atk)	self.currentAttr[2] = self.maxAttr[2]end--狂化计算function DataAttribute:frantic(rate)	local lost = self.maxAttr[1] - self.currentAttr[1]	local per = lost / self.maxAttr[1]	local atkAdd = math.floor(per * rate * self.maxAttr[2])	if atkAdd <= 0 or atkAdd == self.franticAtkAdd then		return false	end	--去除旧的狂化值	self.currentAttr[2] = self.currentAttr[2] - self.franticAtkAdd	self.franticAtkAdd = atkAdd	self.currentAttr[2] = self.currentAttr[2] + self.franticAtkAdd	return trueend