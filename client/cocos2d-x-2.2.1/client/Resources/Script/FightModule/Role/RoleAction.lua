------------------------------------------------------------------------ 作者：lewis-- 日期：2013-3-31-- 描述：角色形为动作基类,AI计算,这边只指怪物----------------------------------------------------------------------RoleAction = class()--构造函数function RoleAction:ctor()	self.mRole = nil			--绑定的角色    self.mRoleType = ""         --区分是敌人AI RoleEnemy 还是怪物AI RoleMonster	self.mConfigTB = {}endfunction RoleAction:init(role,roleType)	self.mRole = role    self.mRoleType = roleType	self:initConfig()end--初始化配置数据function RoleAction:initConfig()	self.mConfigTB["action_name"]			= "idle"	--形为名, idle, attack, magic	self.mConfigTB["skill_id"]				= 0			--想使用的技能id	self.mConfigTB["skill_level"]			= 1			--想使用的技能等级		--图腾的参数	end--获得数据function RoleAction:getConfig(name)	local ret = self.mConfigTB[name]	return retend--设置数据function RoleAction:setConfig(name, value)	self.mConfigTB[name] = valueend--计算行为function RoleAction:calc()	self:initConfig()	--自爆	local role = self.mRole	local stayRound = role:getConfig("stay_round")	if stayRound == 1 then		local id = role:getConfig("skill_after_death")		if id > 0  then			self:setConfig("action_name", "death_wish")			self:setConfig("skill_id", id)			self:setConfig("skill_level", 1)            return		end	end		--被眩晕了，不再使用技能与攻击	if self.mRole:isCommonAttackValid() == false then		return	end		--使用技能	local skill = self.mRole.mData.mSkill	local tb = skill:getTB()	for key, value in pairs(tb) do		if value.isValid then			if value.maxCD > 0 then--只创建主动技能				if value.count >= value.maxCD then					if self:calcSkill(value.id, value.level) then						self:setConfig("action_name", "magic")						self:setConfig("skill_id", value.id)						self:setConfig("skill_level", value.level)					end					return				end			--一出现就释放的技能			elseif value.maxCD < 0 then				value.isValid = false				self:setConfig("action_name", "magic")				self:setConfig("skill_id", value.id)				self:setConfig("skill_level", value.level)				return			end		end	end		--主动攻击	local attackType = self.mRole:getConfig("attack_type")	if attackType == 1 then		self:setConfig("action_name", "attack")		self:setConfig("skill_id", 0)		self:setConfig("skill_level", 0)	endend--技能使用判定,暂只做对自身使用技能判定function RoleAction:calcSkill(id, level)    if self.mRoleType == "RoleMonster" then         return true    end 	local config = SkillConfig.getSkillBaseInfo(id)	if config.target == 2 or  config.target == 4 then		return true	end	local role = self.mRole	local attribute = role.mData.mAttribute	local atk = attribute:getByName("atk")	local life = attribute:getByName("life")	local maxlife = attribute:getMaxAttrWithName("life")	local dp, hp = SkillMgr.calDamageValue(id, level, atk)	local health = dp + hp	local lost = maxlife - life	buff = SkillConfig.getSkillBuffInfo(config.target_buff_id)	local buffStr = nil	if buff then		buffStr = buff.modify_attribute	end		if buffStr ~= nil then		local buff = role:getDataInfo("buff")		local total = 0		--本身没有buff状态		--if buff.units[1].id == 0 then			--清洁buff	    if AIMgr.isExsitField(buffStr, "cleaned") then				--身上有debuff			if BuffMgr.isDebuff(role)then					return true			else				return false			end		end		--end	end	if health > 0 then		if lost >= health then			return true		else			return false		end	end	return trueend