------------------------------------------------------------------------ 作者：lewis hamilton-- 日期：2014-03-03-- 描述：技能管理器----------------------------------------------------------------------SkillMgr = {}local function localPrint(...)	if true then return end	localPrint("SkillMgr", ...)endfunction SkillMgr.newInfo(id, level)	local skillInfo = {}	skillInfo.id = id	skillInfo.level = level	return skillInfoend--初始化function SkillMgr.init()end--获得技能名function SkillMgr.getSkillName(skillBaseID)	local skillBaseInfo = SkillConfig.getSkillBaseInfo(skillBaseID)	if skillBaseInfo == nil then 		return "none"	end	return skillBaseInfo.nameend--获得技能cdfunction SkillMgr.getSkillCD(skillBaseID)	local skillBaseInfo = SkillConfig.getSkillBaseInfo(skillBaseID)	if skillBaseInfo == nil then return -1 end	return skillBaseInfo.skill_cdend--获得妖术变化的怪IDfunction SkillMgr.getHexRoleID(skillBaseID)	local skillBaseInfo = SkillConfig.getSkillBaseInfo(skillBaseID)	if skillBaseInfo == nil then		return -1	end	local buffConfig = SkillConfig.getSkillBuffInfo(skillBaseInfo.target_buff_id,skillBaseInfo.quality,0)	if buffConfig == nil then 		return -1	end		local nameTB = CommonFunc_split(buffConfig.modify_attribute, ",")	local valueTB = CommonFunc_split(buffConfig.modify_value, "|")	for key, value in pairs(nameTB) do		if value == "hex" then			return valueTB[key] + 0		end	end	return -1endfunction SkillMgr.parseStatusString(modifyTable, nameStr, valueStr, quality, level,buffBeMaode,talentLv)    buffBeMaode = buffBeMaode or 1    local valueTable = 	{		{name = "Q", 	value = quality},		{name = "L", 	value = level},        {name = "T", 	value = talentLv or 1}	}    local nameStrTb  = CommonFunc_split(nameStr,",")    local valueStrTb = CommonFunc_split(valueStr,"|")    for key,value in pairs(nameStrTb) do         local modifyUnit = 	    {		    modifyAttribute = "nil",		    modifyValue = 0,		    isPercentage = false,            realModifyValue = 0	    }        modifyUnit.modifyAttribute = nameStrTb[key]        --是否是百分比        local pRet = string.find(nameStrTb[key], "(P)")        if pRet ~= nil  then            modifyUnit.isPercentage = true            modifyUnit.modifyAttribute = string.sub(nameStrTb[key],1,-4)        end         if buffBeMaode == 1 then             modifyUnit.modifyValue = ExpressionParse.compute(ParseExpressByLv(level,valueStrTb[key]), valueTable)        else             modifyUnit.modifyValue = ExpressionParse.compute(ParseExpressByTanletLv(talentLv,valueStrTb[key]), valueTable) --FIXME        end         table.insert(modifyTable, modifyUnit)    endend--[[local testTable = {}SkillMgr.parseStatusString(testTable, "tenacity(P),atk(P)", "0-(5+2*(Q-2)+L+0.5*(Q-2)*L),0-(4+(Q-2)+(Q-1)*L)", 3, 5)]]----解析技能idfunction SkillMgr.parseSkillID(nameStr)	local tb = CommonFunc_split(nameStr, ",")	for key, value in pairs(tb) do		value = value + 0	end	return tbend--获得buff字符串function SkillMgr.getBuffStr(id)	local base = SkillConfig.getSkillBaseInfo(id)	if base == nil then		return nil	end	local buff = SkillConfig.getSkillBuffInfo(base.target_buff_id)	if base.skills_typelist == 112 then		buff = SkillConfig.getSkillBuffInfo(base.caster_buff_id)	end	if buff == nil then		return nil	end	return buff.modify_attributeend--是否触发BUFF--[[function SkillMgr.isOnBuff(quality, level, rate)	local valueTable = 	{		{name = "Q", 	value = quality},		{name = "L", 	value = level},	}	local probability = ExpressionParse.compute(rate, valueTable)	--几率判定	local rand = math.random(1, 100)	if rand > probability then		return false	end	return trueend]]----是否触发BUFFfunction SkillMgr.isOnBuff(quality, level, rate,denfer)    local denferlv = nil     local casterlv = nil     if denfer ~= nil  then        denferlv =  denfer:getConfig("role_level")    else        denferlv = ModelPlayer.getLevel()    end     	local valueTable = 	{        {name = "Q", 	value = quality},		{name = "L", 	value = level},        {name = "E", 	value = denferlv},	}	local probability = ExpressionParse.compute(rate, valueTable)    probability = math.max(0,probability)    probability = math.min(100,probability)	--几率判定    	local rand = math.random(1, 100)	if rand > probability then		return false --false 必定触发BUFF	end	return trueend--计算技能的伤害值function SkillMgr.calDamageValue(skillBaseID, level, atk,talentlevel)    talentlevel = talentlevel or 0	local skillBaseInfo = SkillConfig.getSkillBaseInfo(skillBaseID)	if skillBaseInfo == nil then 		return 0 	end	local valueTable = 	{        {name = "T", 	value = talentlevel},		{name = "Q", 	value = skillBaseInfo.quality},		{name = "L", 	value = level},	}	local percentage = ExpressionParse.compute(skillBaseInfo.base_damage, valueTable)	local bonusValue = 0    if talentlevel >=1  then         bonusValue = ExpressionParse.compute(ParseExpressByTanletLv(talentlevel,skillBaseInfo.bonus_damage), valueTable)    else        bonusValue = ExpressionParse.compute(ParseExpressByLv(level,skillBaseInfo.bonus_damage), valueTable)    end 	local damgeValue = (percentage / 100.0) * atk + bonusValue    local increasesBlood = 0    local _addrate,_addvalue = SkillConfig.getIncreasesBloodInfo(skillBaseInfo.special_set,skillBaseInfo.quality,level,talentlevel)     if _addrate ~= nil then         increasesBlood = math.ceil(_addrate / 100 * damgeValue)  +  _addvalue    end 	--local increasesBlood = ExpressionParse.compute(skillBaseInfo.increases_blood, valueTable)	--increasesBlood = math.ceil(increasesBlood / 100 * damgeValue)	--localPrint("skill increases blood", increasesBlood)	return math.ceil(damgeValue), increasesBloodend------------------------------------------added  by lihq   2014.5.7-------------------------------------------------------------------------------------------根据buff_id,获得buff 的modify_valuelocal  function  getBuffModify_value(buffid)	print("buffid:",buffid)	local res = SkillConfig.getSkillBuffInfo(tonumber(buffid))	local row = {}	row.modify_value =  CommonFunc_split(res.modify_value, "|")	return rowend--根据buff —— id，获得buff的描述function  SkillMgr.getBuffDescription(id,quality,level,talentLv)	return SkillDescription.buff(id, quality, level,talentLv)end--根据技能的id，算出a,b,c,d 的值，并返回字符串描述function  SkillMgr.getDescription(id,level)    return SkillDescription.create(id,level)	--return SkillDescription.skill(id, level)end