------------------------------------------------------------------------ 作者：lewis hamilton-- 日期：2014-03-03-- 描述：技能描述------------------------------------------------------------------------#define use_multi_language		--开启多语言SkillDescription = {}local mStatusTagTB = {}local mAttrMapping_Name = {}mStatusTagTB["life"] 				= "生命"mStatusTagTB["atk"] 				= "攻击"mStatusTagTB["speed"] 				= "速度"mStatusTagTB["hit_ratio"] 			= "命中率"mStatusTagTB["critical_ratio"] 		= "暴击率"mStatusTagTB["miss_ratio"] 			= "闪避率"mStatusTagTB["tenacity"] 			= "韧性"--是否存在状态local function isExsitStatus(modifyTB, name)	for key, value in pairs(modifyTB) do		if value.modifyAttribute == name then			return value		end	end	return nilendlocal function getStatusValueStr(unit)	local str = ""	local value = math.abs(unit.modifyValue)	if unit.isPercentage then		str = tostring(value).."%"	else		str = tostring(value)	end	return strend--起始字符local mConnector_1_TB = {}mConnector_1_TB[1] = "回复"mConnector_1_TB[2] = "对"mConnector_1_TB[3] = "回复"mConnector_1_TB[4] = "对"--目标local mTargetTB = {}mTargetTB[1] = "自己"mTargetTB[2] = "目标"mTargetTB[3] = "己方所有单位"mTargetTB[4] = "敌方群体"--作用类型local mConnector_2_TB = {}mConnector_2_TB[1] = ""mConnector_2_TB[2] = "造成"mConnector_2_TB[3] = ""mConnector_2_TB[4] = "造成"--作用结果local mConnector_3_TB = {}mConnector_3_TB[1] = "生命"mConnector_3_TB[2] = "伤害"mConnector_3_TB[3] = "生命"mConnector_3_TB[4] = "伤害"function ParseExpressByLv(lv,express)
    if express == nil then return  end 
    local exptb = CommonFunc_split(express,",")
    if #exptb == 1 then 
        return exptb[1]
    end 

    for key = 1,120  do --最大120级
        local curlv = tonumber(exptb[2*key-1])
        assert(curlv ~= nil, "PLANNER ERROR!! key"..key)
        local curExp = exptb[2*key] 
        assert(curExp ~= nil, "PLANNER ERROR!! curExp"..key)

        if  lv <=  curlv then 
            return curExp
        end 
    end 
end function  ParseExpressByTanletLv(TalentLv,express)    if express == nil then return  end 
    local exptb = CommonFunc_split(express,",")
    if #exptb == 1 then 
        return exptb[1]
    end 

    for key = 1,30  do --天赋最大30级
        local curlv = tonumber(exptb[2*key-1])
        assert(curlv ~= nil, "PLANNER ERROR!! key"..key)
        local curExp = exptb[2*key] 
        assert(curExp ~= nil, "PLANNER ERROR!! curExp"..key)

        print("ParseExpressByTanletLv",TalentLv,curlv)
        if  TalentLv <=  curlv then 
            return curExp
        end 
    end end --buff描述function SkillDescription.buff(id, quality, level,talentLevel)       talentLevel = talentLevel or 0       local buffStr = ""       local buffInfo = SkillConfig.getSkillBuffInfo(id,quality,level,talentLevel)       local modifyTB = {}	   SkillMgr.parseStatusString(modifyTB, buffInfo.modify_attribute, buffInfo.modify_value, quality, level,buffInfo.buff_made,talentLevel)       local descTb = CommonFunc_split(buffInfo.description, "|")       for k,v in pairs(modifyTB) do             if v.modifyValue == 0 or v.modifyValue == "0" then                 buffStr = buffStr..string.format(descTb[k],"")            else                 buffStr = buffStr..string.format(descTb[k],math.abs(tonumber(v.modifyValue)))            end        end            buffStr = buffStr..string.format(descTb[#descTb],buffInfo.duration)--持续几回合       return buffStrendlocal function SkillDesedamage(skillInfo,level)	local quality = skillInfo.quality    local valueTable = 	{		{name = "Q", 	value = quality},		{name = "L", 	value = level},	}    local baseDamage =  ExpressionParse.compute(skillInfo.base_damage, valueTable)    local bonusDamage = ExpressionParse.compute(ParseExpressByLv(level,skillInfo.bonus_damage), valueTable)    local descTb = CommonFunc_split(skillInfo.description, "|")    local damageStr = "伤害:"    --print("skillInfo:",skillInfo.id,skillInfo,"skillInfo.description",skillInfo.description,"baseDamage",baseDamage,"bonusDamage",bonusDamage)    if  baseDamage == 0 and bonusDamage == 0 then         return damageStr.."无",false    end     if baseDamage ~= 0 then         damageStr = damageStr..string.format(descTb[1],baseDamage)    end     if bonusDamage ~= 0 then         damageStr = damageStr..string.format(descTb[2],bonusDamage)    end     return damageStrend local function SkillDeseSpec(skillInfo,level)   local SpecStr = "特殊:"   local specDesTB =  skillInfo.special_set    if #specDesTB <= 0 then         return SpecStr.."无"   end    for key,specid in pairs(specDesTB) do         local specInfo = SkillConfig.getSkillSpecialSetTB(specid)        if specInfo.name == "vampire" then            local addrate,addvalue = SkillConfig.getIncreasesBloodInfo(skillInfo.special_set)             local descTb = CommonFunc_split(specInfo.description, "|")            if addrate ~= 0 then                 SpecStr = SpecStr..string.format(descTb[1],addrate)            end             if addvalue ~= 0 then                 SpecStr = SpecStr..string.format(descTb[2],addvalue)            end         elseif specInfo.name == "slay" then             local belowRate,addatkrate = SkillConfig.getSalyInfo(skillInfo.special_set,quality,level,tanlentLv)            local descTb = CommonFunc_split(specInfo.description, "|")            if addrate ~= 0 then                 SpecStr = SpecStr..string.format(descTb[1],belowRate)            end             if addvalue ~= 0 then                 SpecStr = SpecStr..string.format(descTb[2],addatkrate)            end         else             SpecStr = SpecStr..specInfo.description        end    end    return SpecStrend local function SkillDeseBuff(skillInfo,level)    local buffStr = "状态："    local quality = skillInfo.quality    local valueTable = 	{		{name = "Q", 	value = quality},		{name = "L", 	value = level},	}    if skillInfo.target_buff_id ==0 and  skillInfo.caster_buff_id == 0 then         return buffStr.."无"    end     -- skillInfo.target_buff_id    local targetRate = ExpressionParse.compute(skillInfo.target_buff_rate, valueTable)    local casterRate = ExpressionParse.compute(skillInfo.caster_buff_rate, valueTable)    --skillInfo.caster_buff_id    --skillInfo.caster_buff_rate    if  skillInfo.target_buff_id ~= 0 then        local buffInfo = SkillConfig.getSkillBuffInfo(skillInfo.target_buff_id,skillInfo.quality,level)       if targetRate>0 and targetRate~=100 then             buffStr = buffStr.."有"..targetRate.."%几率"       end       buffStr = buffStr.."使"..mTargetTB[skillInfo.target]       local modifyTB = {}	   SkillMgr.parseStatusString(modifyTB, buffInfo.modify_attribute, buffInfo.modify_value, quality, level)       local descTb = CommonFunc_split(buffInfo.description, "|")       for k,v in pairs(modifyTB) do             if v.modifyValue == 0 or v.modifyValue == "0" then                 buffStr = buffStr..string.format(descTb[k],"")            else                 buffStr = buffStr..string.format(descTb[k],math.abs(tonumber(v.modifyValue)))            end        end               buffStr = buffStr..string.format(descTb[#descTb],buffInfo.duration)--持续几回合    end      if  skillInfo.caster_buff_id ~= 0 then        local buffInfo = SkillConfig.getSkillBuffInfo(skillInfo.caster_buff_id,skillInfo.quality,level)       if casterRate>0 and casterRate~=100 then             buffStr = buffStr.."有"..casterRate.."%几率"       end       buffStr = buffStr.."使"..mTargetTB[skillInfo.target]       local modifyTB = {}	   SkillMgr.parseStatusString(modifyTB, buffInfo.modify_attribute, buffInfo.modify_value, quality, level)       local descTb = CommonFunc_split(buffInfo.description, "|")       for k,v in pairs(modifyTB) do             if v.modifyValue == 0 or v.modifyValue == "0" then                 buffStr = buffStr..string.format(descTb[k],"")            else                 buffStr = buffStr..string.format(descTb[k],tonumber(v.modifyValue))            end        end        buffStr = buffStr..string.format(descTb[#descTb],buffInfo.duration)--持续几回合    end     return buffStrend --技能的描述function SkillDescription.create(id,level)	local skillInfo = SkillConfig.getSkillBaseInfo(id)    assert(skillInfo~=nil,"技能描述错误ID：",id)    local finalStr = ""    finalStr=finalStr..SkillDesedamage(skillInfo,level).."\n"    finalStr=finalStr..SkillDeseSpec(skillInfo,level).."\n"    finalStr=finalStr..SkillDeseBuff(skillInfo,level)    return finalStrend --技能表述 针对援军function SkillDescription.reinforce(id,level)    local skillInfo = SkillConfig.getSkillBaseInfo(id)    assert(skillInfo~=nil,"技能描述错误ID：",id)    local finalStr = "具体描述长按技能图标查看"    local str,pRet = SkillDesedamage(skillInfo,level)    if pRet == false then  --没有特效        return finalStr    else         return  str.."\n"..finalStr    end end--SkillMgr.description(40100, 1)