------------------------------------------------------------------------ 作者：lewis-- 日期：2013-4-4-- 描述：普通攻击计算----------------------------------------------------------------------CommonAttack = {}--对战function CommonAttack.fight(player, monster)	local speed1 = player.mData.mAttribute:getByName("speed")	local speed2 = monster.mData.mAttribute:getByName("speed")	monster:setConfig("under_attack", true)	local attacker = player	local defender = monster	if CommonAttack.senteJudge(speed1, speed2) == false then--怪物先手		attacker = monster		defender = player	end		--攻击	CommonAttack.attack(attacker, defender)	if attacker:isAlive() == false then		return	end	if defender:isAlive() == false then		return	end		--被击者回击	CommonAttack.attack(defender, attacker)end--普通攻击function CommonAttack.attack(attacker, defender, timer)	--不可攻击	if attacker:isCommonAttackValid() == false then		return	end		local round = BattleMgr.getConfig("bmc_current_round")	local atk = attacker.mData.mAttribute:getByName("atk")	local damage, health = CommonAttack.numCalOfAttack(attacker, defender, atk)			--攻击动作	attacker:bearDamage(health:getData("damage"))	if timer == nil then		timer = round:getLastTime()	end	local step = StepAttacker.new()	step:init(attacker)	step:setTimer(timer)	health:setData("position", attacker:getTopPos())	round:add(step)	timer = timer + step:getDuration()		--弹道飞行	local ballistic = attacker:getBallistic()	step = StepBallistic.new()	local flyId 	= ballistic.flyId	local frontId 	= ballistic.frontId	local backId	= ballistic.backId	--miss不播放前景+背景动画	if damage:getData("type") == "miss" then		frontId = 0		backId = 0	end	step:init(attacker:getMiddlePos(), defender:getMiddlePos(), flyId, frontId, backId)	step:setTimer(timer)	round:add(step)	timer = timer + step:getDuration()    --被击前触发    talentMgr.excultOnEvent(defender,"BeCommonAttackBefore",damage,nil)    		BattleMgr.defenderBearDamage(defender, damage, timer)	defender:bearDamage(damage:getData("damage"))		--受击动作	step = StepDefender.new()	step:init(defender, damage, attacker, health)	step:setTimer(timer)	damage:setData("position", defender:getTopPos())	round:add(step)	timer = timer + step:getDuration()    --被击后触发    talentMgr.excultOnEvent(defender,"BeCommonAttack",nil,attacker)    	local empty = StepEmpty.new()	empty:setTimer(timer)	round:add(empty)    --普通攻击触发技能    talentMgr.excultOnEvent(attacker,"CommonAttack",nil,defender)	--被击者被K.O后触法技能    RoleMgr.beKOcastSkill(defender,attacker,timer,BattleMgr.getConfig("bmc_baneling_duration"))end--先手判断function CommonAttack.senteJudge(speed1, speed2)	local K_speed = LogicTable.getGameDateTable().speed + 0		--速度常量	--【攻击方速度值 + random（攻击方速度值 * N%）】-【（被击方速度值 + random（被击方速度值 * N%）】	if (speed1 + math.random(0, speed1 * K_speed)) - ( speed2 + math.random(0, speed2 * K_speed) ) > 0 then		return true	end	return falseend--攻击数值计算function CommonAttack.numCalOfAttack(attacker, defender, dp)	local attribute1 = attacker.mData.mAttribute	local attribute2 = defender.mData.mAttribute	local result = attribute1:attack(attribute2)	local hp = 0		--状态	local attackerStatus = attacker.mData.mStatus	local defenderStatus = defender.mData.mStatus		--攻击者隐身中,强制设成crit	if attackerStatus:getStatus("status_stealth") then		result = "crit"	end		--被击者,隐身中,强制设成miss	if defenderStatus:getStatus("status_stealth") then		if defender:isCommonAttackValid() then			result = "miss"		end	end		if result == "miss" then		dp = 0	elseif result == "crit" then		local rate = BattleMgr.getConfig("bmc_crit_rate")		dp = math.ceil(dp * rate)	end	    local isAbsorptDp = false--是否有吸收伤害    local damage = Damage.new()	if result ~= "miss" then        --伤害加深计算		local rate = defenderStatus:getStatus("status_amplify_damage")		dp = dp + (math.ceil(dp * rate))        --伤害减少计算        local value = defenderStatus:getStatus("status_damage_reduce_value")		dp = dp - value        if dp < 1 then dp = 1 end         --buff伤害减免计算        local rate = defenderStatus:getStatus("damage_reduction")		dp = dp - (math.ceil(dp * rate / 100))        if value ~= 0 or rate ~=0 then             damage:setData("behavior","jianmianshanghai")         end                 --物理反弹        if defender:isCommonAttackValid() then		    local rate = defenderStatus:getStatus("status_damage_rebound_rate")            local dvalue = defenderStatus:getStatus("status_damage_rebound_value") 		    hp = hp - math.ceil(dp * rate) - dvalue        end        --吸血光环		local rate = attackerStatus:getStatus("status_damege_health_rate")		hp = hp + math.ceil(dp * rate)		        --伤害吸收        dp,isAbsorptDp = defender:absorptDamage(dp)	end    		if FightDateCache.PVEorPVP() == "PVP" then        local defMitigation = defender:getConfig("mitigation")        dp = dp * (1 - defMitigation)	end		damage:setData("damage", -math.ceil(dp*damageCoe(attacker,defender)))	damage:setData("type", result)    if isAbsorptDp == true then         damage:setData("behavior","absorption")     end 		local health = Damage.new()	health:setData("damage", hp)	health:setData("type", "hit")	return damage, healthend