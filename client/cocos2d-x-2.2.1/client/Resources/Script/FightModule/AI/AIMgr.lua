------------------------------------------------------------------------ 作者：lewis-- 日期：2013-3-31-- 描述： AI管理器----------------------------------------------------------------------require "AIControllView"require "AINode"require "NodeTapGird"require "NodeAttackMonster"require "NodeOpenDoor"require "NodeOpenGrid"require "NodePickupBloodBottle"require "NodePickupCoins"require "NodeUseSkill"require "NodeSkillAOE"require "NodeSkillForSelf"require "NodeSkillSingleTarget"require "MonsterHatred"--权值计算公式--0~60随机,没特殊怪物情况--60~100主动怪--100~300特殊怪--300以上竞技场敌人,bossAIMgr = {}function AIMgr.init()	AIMgr.initConfig()	if FightDateCache.getData("fd_game_mode") == 2 then		AIMgr.setConfig("open_door_first", true)	endendfunction AIMgr.cleanup()	AIMgr.stop()endfunction AIMgr.reset()	AIMgr.stop()end--恢复原有状态function AIMgr.recover()	--AIMgr.setConfig("is_opened", true)    AIControllView.refresh()	if AIMgr.getConfig("is_opened") == false then		return	end	AIMgr.start()end-----------------------------------------------------------------------------------------------------------配置数据--------------------------------------------------------------------------------------------------------------local mConfigTB = {}--初始化配置数据function AIMgr.initConfig()	mConfigTB = {}	mConfigTB["operate_table"]		 = {}	--操作结点表	mConfigTB["update_id"]			 = nil	mConfigTB["is_opened"]			 = false	mConfigTB["open_door_first"]	 = false		--开门优先	end--获得数据function AIMgr.getConfig(name)	local ret = mConfigTB[name]	return retend--设置数据function AIMgr.setConfig(name, value)	mConfigTB[name] = valueend--更新数据function AIMgr.updateData(name, value)	mConfigTB[name] = mConfigTB[name] + valueend-----------------------------------------------------------------------------------------------------------环境变量----------------------------------------------------------------------------------------------------------------初始化环境变量local mEnvirTB = {}function AIMgr.initEnvir()	mEnvirTB = {}	mEnvirTB["blood_bottle_cnt"]	 = 0			--格子上血瓶数	mEnvirTB["is_door_open"]		 = false		--门是否开了	mEnvirTB["monster_cnt"]			 = 0			--怪物总个数	mEnvirTB["skill_on_cd"]			 = 0			--玩家冷却中的技能个数	mEnvirTB["aoe_skill_cnt"]		 = 0			--已冷却完毕的aoe技能个数	mEnvirTB["enable_tap_gird"]		 = 0			--可点击格子数	mEnvirTB["enable_attack_cnt"]	 = 0			--可攻击怪物数		--特别怪物数	mEnvirTB["human_shield"]		 = 0			--肉盾怪个数	mEnvirTB["drop_out_coins"]		 = 0			--偷钱怪个数	mEnvirTB["frantic"]				 = 0			--狂化怪个数	mEnvirTB["initiative_attack"]	 = 0			--主动怪个数	mEnvirTB["boss"]				 = 0			--boss个数	mEnvirTB["skill_monster"]		 = 0			--技能怪个数	mEnvirTB["normal_monster"]		 = 0			--普通怪		--	mEnvirTB["min_hit_points"]		 = 0			--怪物中的最低血量,优先攻击	mEnvirTB["can_attack_boss"]		 = 0			--可攻击的boss个数end--获得环境变量function AIMgr.getEnvir(name)	local ret = mEnvirTB[name]	return retend--设置环境变量function AIMgr.setEnvir(name, value)	mEnvirTB[name] = valueend--更新环境变量function AIMgr.updateEnvir(name, value)	mEnvirTB[name] = mEnvirTB[name] + valueend-----------------------------------------------------------------------------------------------------------外部接口----------------------------------------------------------------------------------------------------------------开启function AIMgr.start()	local id = CCDirector:sharedDirector():getScheduler():scheduleScriptFunc(AIMgr.update, 0.6, false)	AIMgr.setConfig("update_id", id)	local actionMgr = CCDirector:sharedDirector():getActionManager()	actionMgr:setSpeed(2.0)end--停止function AIMgr.stop()	local id = AIMgr.getConfig("update_id")	if id == nil then		return	end	CCDirector:sharedDirector():getScheduler():unscheduleScriptEntry(id)	AIMgr.setConfig("update_id", nil)	local actionMgr = CCDirector:sharedDirector():getActionManager()	actionMgr:setSpeed(1.0)end--是否可以点击
function AIMgr.isOnControll()

    if FightDateCache.getData("fd_global_lockevent") then 
        return false
    end 

    if  FightDateCache.getData("fd_game_mode") ~= 5 then 
	    if FightDateCache.getData("fd_player_knockout") then
		    return false
	    end
    end
	if FightDateCache.getData("fd_enemy_knockout") then
		return false
	end
	if NetSendLoadLayer.isWaitMessage() == true then
		return false
	end
	if UIManager.getLayerCount() > 1 and  UIManager.isAllUIEnabled() == false then 
		return false
	end
	return true
end--situationfunction AIMgr.update()	if  AIMgr.isOnControll() == false then         cclog("AIMgr.isOnControll()",FightMgr.isOnControll())        return     end	if FightDateCache.getData("fd_game_pause") then        cclog("FightDateCache.getData(fd_game_pause)",FightDateCache.getData("fd_game_pause"))		return	end	if RoleMgr.isTouchEnable() == false then        cclog("RoleMgr.isTouchEnable",RoleMgr.isTouchEnable())		return	end		--if GuideMgr.guideStatus() > 0 then        --cclog("GuideMgr.guideStatus",GuideMgr.guideStatus())		--return 	--end 		AIMgr.setConfig("operate_table", {})	AIMgr.initEnvir()	AIMgr.createNodeByMap()	AIMgr.createBySelfSkill()	AIMgr.createByFriendSkill()	AIMgr.calcEnvir()	AIMgr.calc()	AIMgr.excute()end-----------------------------------------------------------------------------------------------------------创建可操作表------------------------------------------------------------------------------------------------------------添加结点function AIMgr.addNode(node)	local tb = AIMgr.getConfig("operate_table")	table.insert(tb, node)end--遍历地图上的可操作结点function AIMgr.createNodeByMap()	local tb = GridMgr.getConfig("gmc_grid_table")	for key, grid in pairs(tb) do		--未打开的格子		if grid:getConfig("is_opened") == false then			if grid:isCanOpened() then				local node = NodeOpenGrid.new()				node:init(grid:getConfig("grid_id"))				AIMgr.addNode(node)				AIMgr.updateEnvir("enable_tap_gird", 1)			end		else			local event = grid:getConfig("event_name")			if event == "monster" then				if grid:getConfig("is_mask") == false then	--攻击怪物					local monster = RoleMgr.getMonsterByGridId(grid:getConfig("grid_id"))					if monster ~= nil and monster:isAlive() then						local node = NodeAttackMonster.new()						node:init(grid:getConfig("grid_id"))						AIMgr.addNode(node)						AIMgr.updateEnvir("enable_attack_cnt", 1)					end				end			elseif event == "blood_bottle" then		--拾取血瓶				local node = NodePickupBloodBottle.new()				node:init(grid:getConfig("grid_id"), grid.mSkillId)				AIMgr.addNode(node)			elseif event == "coins" then			--拾取金币				local node = NodePickupCoins.new()				node:init(grid:getConfig("grid_id"))				AIMgr.addNode(node)			elseif event == "door" then				--开门				local node = NodeOpenDoor.new()				node:init(grid:getConfig("grid_id"))				AIMgr.addNode(node)				AIMgr.setEnvir("is_door_open", true)			end		end	endend--遍历自身技能function AIMgr.createBySelfSkill()	local monsterTB 	= RoleMgr.getConfig("rmc_monster_table")	local player = RoleMgr.getConfig("rmc_player_object")	local skill = player.mData.mSkill	local tb = skill:getTB()	for key, value in pairs(tb) do		if value.isValid then			if value.count >= value.maxCD then		--技能是否已冷却完毕				local config = SkillConfig.getSkillBaseInfo(value.id)				if config.target == 2 then			--对单一目标					for inkey, monster in pairs(monsterTB) do						if monster:isAlive() then							local node = NodeSkillSingleTarget.new()							local gridId = monster:getConfig("grid_id")							node:init(key, value.id, gridId, true)							AIMgr.addNode(node)						end					end				elseif config.target == 4 then		--对全体目标					local cnt = RoleMgr.getMonsterCnt()					if cnt > 0 then						local node = NodeSkillAOE.new()						node:init(key, value.id, 0, true)						AIMgr.addNode(node)						AIMgr.updateEnvir("aoe_skill_cnt", 1)					end				else								--对自已施放					local node = NodeSkillForSelf.new()					node:init(key, value.id, 0, true)					AIMgr.addNode(node)				end			else				AIMgr.updateEnvir("skill_on_cd", 1)			end		end	endend--友军技能function AIMgr.createByFriendSkill()	--有无援军	local root = AssistanceViewController.getConfig("root_view")	if root == nil then		return	end		--cd是否冷却完毕	local cd = AssistanceViewController.getConfig("cd")	if cd > 0 then		return	end		local monsterTB 	= RoleMgr.getConfig("rmc_monster_table")	local player = RoleMgr.getConfig("rmc_player_object")		local id = AssistanceViewController.getConfig("skill_id")	local level = AssistanceViewController.getConfig("skill_level")		local config = SkillConfig.getSkillBaseInfo(id)	if config.target == 2 then			--对单一目标		for inkey, monster in pairs(monsterTB) do			if monster:isAlive() then				local node = NodeSkillSingleTarget.new()				local gridId = monster:getConfig("grid_id")				node:init(0, id, gridId, false)				AIMgr.addNode(node)			end		end	elseif config.target == 4 then		--对全体目标		local cnt = RoleMgr.getMonsterCnt()		if cnt > 0 then			local node = NodeSkillAOE.new()			node:init(0, id, 0, false)			AIMgr.addNode(node)			AIMgr.updateEnvir("aoe_skill_cnt", 1)		end	else								--对自已施放		local node = NodeSkillForSelf.new()		node:init(0, id, 0, false)		AIMgr.addNode(node)	endend-----------------------------------------------------------------------------------------------------------环境变量计算----------------------------------------------------------------------------------------------------------function AIMgr.calcEnvir()	local tb = AIMgr.getConfig("operate_table")	for key, node in pairs(tb) do		node:calcEnvir()	end		--怪物个数解析	local tb = RoleMgr.getConfig("rmc_monster_table")	local monsterCount = 0	local minHitPoints = 9999999	--最低血量	for kev, monster in pairs(tb) do		if monster:isAlive() then			monsterCount = monsterCount + 1			local status = monster.mData.mStatus			--肉盾怪			local redution = status:getStatus("human_shield_damage_reduce")			if redution > 0 then				AIMgr.updateEnvir("human_shield", 1)			end						--偷钱怪,并已成功偷了钱			if monster:getConfig("drop_out_coins") > 0 then				AIMgr.updateEnvir("drop_out_coins", 1)			end						--狂化怪,不建议普通攻击			if monster:getConfig("frantic_rate") > 0 then				AIMgr.updateEnvir("frantic", 1)			end						--虚弱光环怪			if monster:getConfig("skill_weak_halo") ~= 0 then							end						--主动怪			if monster:getConfig("attack_type") == 1 then				AIMgr.updateEnvir("initiative_attack", 1)			end						--boss			if monster:getConfig("is_boss") then				AIMgr.updateEnvir("boss", 1)				local grid = GridMgr.getGridByIdx(monster.mGridId)				if grid:getConfig("is_mask") == false then	--攻击怪物					AIMgr.updateEnvir("can_attack_boss", 1)				end			end						--技能怪			local cnt = monster:getConfig("skill_cnt")			if cnt > 0 then				AIMgr.updateEnvir("skill_monster", 1)			end						--普通怪			if eval == 0 then				AIMgr.updateEnvir("normal_monster", 1)			end						local hitPoints = monster:getDataInfo("attr").hitPoints			if minHitPoints > hitPoints then				minHitPoints = hitPoints			end		end	end	AIMgr.setEnvir("min_hit_points", minHitPoints)	AIMgr.setEnvir("monster_cnt", monsterCount)	--Log(mEnvirTB)end-----------------------------------------------------------------------------------------------------------计算结点权值----------------------------------------------------------------------------------------------------------function AIMgr.calc()	local tb = AIMgr.getConfig("operate_table")	for key, node in pairs(tb) do		node:calc()	endend-----------------------------------------------------------------------------------------------------------执行最优结点----------------------------------------------------------------------------------------------------------function AIMgr.excute()	local tb = AIMgr.getConfig("operate_table")	local maxEval = 0	local optimalNode = nil		--最优节点	for key, node in pairs(tb) do		local eval = node:getEval()		if eval > maxEval then			optimalNode = node			maxEval = eval		elseif eval == maxEval and math.random(0, 100) < 50 then			optimalNode = node		end	end	if optimalNode ~= nil then		optimalNode:excute()	endend--buff是否存在字段function AIMgr.isExsitField(str, field)	local posName = string.find(str, field)	if (not posName) then		return false	else		return true	endendfunction AIMgr.isExsitFieldWithTable(str, tb)	for key, value in pairs(tb) do		if AIMgr.isExsitField(str, value) then			return true		end	end	return falseend		