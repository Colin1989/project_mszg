---------------------------------------------------	文件内容：	UI界面管理--	叶江涛		2013/11/21	--  shengl		修改		-------------------------------------------------UIManager = {}---	界面常量注册表 	------------------	tag: 界面ID		------------------ PopUp: true = 弹出( 弹出的窗口需要 有弹出声音 ,点击周围区域该窗口要关闭)---	jsonFile: 资源文件名	-----------  --- tb: 对应的lua表 ----------------UIManager_UItable = {	["UI_Begin"] = {				--游戏登入主界面		tag = 900,		jsonFile = "Begin.json",		PopUp = false,		focus = true,		tb = LayerBegin	},	["UI_ComfigDialog"] = {		tag = 921,		PopUp = true,		jsonFile = "sysmsg_2_1.json",		focus = true,		tb = LayoutComfigDialog	},	["UI_RollChoice"] = {			--角色选择界面		tag = 924,		PopUp = false,		jsonFile = "herochoosenew_1.json",		focus = true,		tb = LayerRoleChoice	},	["UI_Main"] = {					--游戏主界面		tag = 925,		PopUp = false,		jsonFile = "MainUI.json",		focus = true,		tb = LayerMain	},			["UI_ComfirmDialog"] = {			--确认对话框		tag = 928,		jsonFile = "sysmsg_2_1.json",		focus = true,		tb = LayerConfirmDialog	},    ["UI_FightOver"] = {			--战斗结算界面		tag = 932,		PopUp = false,		jsonFile = "fightOver_1.json",		focus = true,		tb = LayerFightOver	},    ["UI_FightReward"] = {			--战斗奖励界面(3星翻牌		tag = 933,		PopUp = false,		jsonFile = "FightReward_1.json",		tb = LayerFightReward	},    ["UI_CopyTips"] = {			--副本详细信息界面		tag = 934,		PopUp = false,		jsonFile = "CopyInfo.json",		focus = true,		tb = LayerCopyTips	},	["UI_TempPack"] = {			--临时背包界面		tag = 935,		PopUp = false,		jsonFile = "Backpack_Temp.json",		focus = true,		tb = LayerTempBackpack	},    ["UI_FightFailed"] = {			--战斗失败界面		tag = 936,		PopUp = false,		jsonFile = "FightFailed_1.json",    		focus = true,		tb = LayerFightFailed	},	["UI_Sell"] = {			--售出		tag = 937,		PopUp = true,		jsonFile = "CommonLayer_sale.json",		focus = true,		tb = LayerSell	},    ["UI_TowerSettle"] = {			--推塔结算界面		tag = 946,		jsonFile = "TowerSettle_1.json",    		focus = true,		tb = LayerTowerSettle	},    ["UI_FriendInfo"] = {			--好友操作界面		tag = 948,		PopUp = true,		jsonFile = "friendInfo_1.json",    		focus = true,		tb = FriendInfo	},     ["UI_FriendChat"] = {			--好友聊天界面		tag = 949,		jsonFile = "FriendChat_1.json",    		focus = true,		tb = FriendChat	},	["UI_Assistance"] = {			-- 援助		tag = 950,		PopUp = true,		jsonFile = "Assistance_1.json",		focus = true,		tb = LayerAssistance	},	["UI_JJCFailed"] = {			-- 竞技场挑战失败		tag = 951,		PopUp = false,		jsonFile = "JJcFail_1.json",		focus = true,		tb = LayerJJcFail	},	["UI_JJCSuccess"] = {			-- 竞技场挑战成功		tag = 952,		PopUp = false,		jsonFile = "JJcSuccess_1.json",		focus = true,		tb = LayerJJcSuccess 	},	["UI_LvUp"] = {			-- 玩家升级		tag = 953,		PopUp = false,		jsonFile = "levelUp_1.json",		focus = true,		tb = LayerLvUp	},	["UI_PauseGame"] = {			-- 游戏暂停		tag = 954,		PopUp = true,		jsonFile = "PsuseGame_1.json",		focus = true,		tb = LayerPauseGame	},	["UI_DoorForOpen"] = {     		-- Loading OpenDoor		tag = 956,		jsonFile = nil,		PopUp = false,		focus = true,		tb = loadingDoorForOpen	},	["UI_Register"] = {			-- 注册界面		tag = 957,		PopUp = true,		jsonFile = "Register.json",		focus = true,		tb = LayerRegister	},	["UI_ChooseServer"] = {			-- 选服界面		tag = 958,		PopUp = false,		jsonFile = "ChooseServer.json",		focus = true,		tb = LayerChooseServer	},	["UI_RegisterProtocal"] = {			-- 注册协议		tag = 959,		PopUp = true,		jsonFile = "RegisterProtocol.json",		focus = true,		tb = LayerRegisterProtocal	},	["UI_Towerpasslayer"] = {							tag = 964,		PopUp = false,		jsonFile = "layerpass_1.json",		focus = true,		tb = LayertowerPasslayer	},	["UI_GameFightInfo"] = {					-- 战斗中人物状态信息界面		tag = 966,		PopUp = true,		jsonFile = "GameFightInfo_1.json",		focus = true,		tb = LayerGameFightInfo	},	["UI_BuyInput"] = {						tag = 967,		PopUp = true,		jsonFile = "commonBuyInput_1.json",		focus = true,		tb = LayerBuyInput	},	["UI_LoginOwn"] = {				-- 自有登陆界面		tag = 968,		PopUp = true,		jsonFile = "LoginOwn.json",    		focus = true,		tb = LayerLoginOwn	},	["UI_LoginChannel"] = {			-- 渠道登陆界面		tag = 969,		PopUp = true,		jsonFile = "LoginChannel.json",    		focus = true,		tb = LayerLoginChannel	},	["UI_DailyCrazyTip"] = {				-- 每日活跃奖励信息界面		tag = 970,		PopUp = true,		jsonFile = "DailyCrazyTip.json",		focus = true,		tb = LayerDailyCrazyTip	},	["UI_GM"] = {				-- GM命令		tag = 972,		PopUp = true,		jsonFile = "GMLayer_1.json",		focus = true,		tb = LayerGM	},	["UI_Sweep"] = {				-- 扫荡		tag = 973,		PopUp = false,		jsonFile = "sweep.json",		focus = true,		tb = LayerSweep	},	["UI_MonsterInfo"] = {				-- 怪物的详细信息		tag = 975,		PopUp = false,		jsonFile = "MonsterInfo_1.json",		focus = true,		tb = LayerMonsterInfo	},	["UI_SweepTimes"] = {				-- 扫荡次数界面		tag = 976,		PopUp = false,		jsonFile = "sweepTimes.json",		focus = true,		tb = LayerSweepTimes	},	["UI_MonsterIntroduce"] = {				-- 新怪物介绍		tag = 977,		PopUp = false,		jsonFile = "MonsterIntroduce.json",		focus = true,		tb = UIMonsterIntroduce	},	["UI_VipGradeGift"] = {     				-- 物品详细信息		tag = 979,		PopUp = true,		jsonFile = "mszg_vip_grade_gift_1.json",		focus = true,		tb = layerVipGradeGift	},	["UI_activalReward"] = {     				-- 兑换码		tag = 980,		PopUp = true,		jsonFile = "ActivatalReward_1.json",		focus = true,		tb = layerActivalReward	},	["UI_mail"] = {     						-- 邮件		tag = 981,		PopUp = true,		jsonFile = "mail.json",		focus = true,		tb = LayerMail	},	["UI_ItemInfo"] = {				-- 物品的详细信息		tag = 982,		PopUp = false,		jsonFile = "ItemInfo_02.json",		focus = true,		tb = LayerItemInfo_02	},	["UI_GemInfo"] = {				-- 宝石的详细信息		tag = 983,		PopUp = false,		jsonFile = "GemInfo_02.json",		focus = true,		tb = LayerGemInfo_02	},	["UI_EquipInfo"] = {			-- 装备的详细信息(长按功能)		tag = 984,		PopUp = false,		jsonFile = "Backpack_Equip_02.json",		focus = false,		tb = LayerEquipInfo_02	},	["UI_CopyDelock"] = {			-- 副本解锁界面		tag = 985,		PopUp = false,		jsonFile = "CopyDelock.json",		focus = true,		tb = LayerCopyDelock	},    ["UI_threedesc"] = {			-- 三星描述界面		tag = 986,		PopUp = true,		jsonFile = "threeStarDest_1.json",		focus = true,		tb = layerthreedesc	},    ["UI_MonthCard"] = {    			-- 月卡（购买后的界面）		tag = 987,		PopUp = true,		jsonFile = "MonthCard.json",		focus = true,		tb = LayerMonthCard	},	["UI_CombatLog"] = {               -- 战斗记录		tag = 988,		PopUp = true,		jsonFile = "GameRank_2.json",		focus = true,		tb = LayerCombatLog	},	 ["UI_ActivityCopyTip"] = {			-- 活动副本详细信息界面		tag = 989,		PopUp = false,		jsonFile = "ActivityCopyTip.json",		focus = true,		tb = LayerActivityCopyTip	},	["UI_MissionComplete"] = {         -- 任务完成		tag = 990,		PopUp = false,		jsonFile = "MissionComplete_1.json",		focus = true,		tb = LayerMissionComplete	},	["UI_WorldChat"] = {         -- 世界聊天		tag = 991,		PopUp = false,		jsonFile = "WorldChat_1.json",		focus = true,		tb = LayerChat	},	["UI_RoleInfo"] = {		tag = 992,		PopUp = false,		jsonFile = "PlayerInfo_1.json",		focus = true,		tb = LayerRoleInfo	},	["UI_InviteCode"] = {					--邀请码		tag = 993,		PopUp = true,		jsonFile = "InvetFriendCode_1.json",		focus = true,		tb = LayerInviteCode	},	["UI_OneKeyCompletion"] = {             -- 一键补全		tag = 994,		PopUp = true,		jsonFile = "OneKeyCompletion_1.json",		focus = true,		tb = LayerOneKeyCompletion	},	["UI_InviteCodeInput"] = {             -- 四格漫画前输入邀请码		tag = 995,		PopUp = true,		jsonFile = "InvetFriendCode_Input.json",		focus = true,		tb = LayerInviteCodeInput	},	["UI_InviteCodeHelpItem"] = {             -- 邀请码帮帮奖励展示		tag = 996,		PopUp = true,		jsonFile = "InvetFriendCode_helpItem.json",		focus = true,		tb = LayerInviteCodeHelpItem	},	["UI_InviteCodeTip"] = {             -- 进入主页时，邀请码帮帮加好友提醒		tag = 997,		PopUp = true,		jsonFile = "InvetFriendCode_tip.json",							focus = true,		tb = LayerInviteCodeTip	},	["UI_MonthCard_No"] = {             -- 没有购买月卡时的界面		tag = 998,		PopUp = true,		jsonFile = "MonthCard_No.json",		focus = true,		tb = LayerMonthCardNo	},	["UI_RoleTalent_Active"] = {             -- 天赋激活时的界面		tag = 999,		PopUp = true,		jsonFile = "RoleTalent_active.json",		focus = true,		tb = LayerRoleTalentActive	},	["UI_RoleTalent_NoActive"] = {             -- 天赋没有激活时的界面		tag = 1000,		PopUp = true,		jsonFile = "RoleTalent_noActive.json",							focus = true,		tb = LayerRoleTalentNoActive	},	["UI_RoleTalent_Reset"] = {             	-- 天赋重置界面		tag = 1001,		PopUp = true,		jsonFile = "RoleTalent_reset.json",							focus = true,		tb = LayerRoleTalentReset	},	["UI_SkillFragInfo"] = {			-- 技能碎片信息		tag = 1002,		PopUp = false,		jsonFile = "SkillFragInfo.json",		focus = true,		tb = LayerSkillFragInfo	},	["UI_RuneReward"] = {               -- 寻宝奖励展示		tag = 1003,		PopUp = true,		jsonFile = "Rune_2.json",		focus = true,		tb = LayerRuneReward	},	["UI_JobInfo"] = {			-- 符文碎片信息		tag = 1005,		PopUp = false,		jsonFile = "jobInfo.json",		focus = false,		tb = LayerJobInfo	},	["UI_SkillInfo"] = {			-- 技能信息		tag = 1006,		PopUp = false,		jsonFile = "SkillInfo.json",		focus = true,		tb = LayerSkillInfo	},	["UI_SkillUnlock"] = {			-- 技能解锁		tag = 1007,		PopUp = true,		jsonFile = "SkillUnlock.json",		focus = true,		tb = LayerSkillUnlock	},	["UI_ShopBuy"] = {			-- 商城（积分商城）购买数量		tag = 1008,		PopUp = true,		jsonFile = "ShopMallBuy.json",		focus = true,		tb = LayerShopBuy	},	["UI_SkillGroup"] = {			-- 技能组		tag = 1009,		PopUp = true,		jsonFile = "SkillGroup.json",		focus = true,		tb = LayerSkillGroup	},	["UI_SkillTakeoff"] = {			-- 技能卸下		tag = 1010,		PopUp = true,		jsonFile = "SkillTakeoff.json",		focus = true,		tb = LayerSkillTakeoff	},	["UI_SkillPuton"] = {			-- 技能穿上		tag = 1011,		PopUp = true,		jsonFile = "SkillPuton.json",		focus = true,		tb = LayerSkillPuton	},	["UI_More"] = {			-- 更多		tag = 1012,		PopUp = true,		jsonFile = "MoreUI.json",		focus = true,		tb = LayerMore	},	["UI_Setup"] = {			-- 系统设置		tag = 1013,		PopUp = true,		jsonFile = "Setup.json",		focus = true,		tb = LayerSetup	},	["UI_Equip_Put"] = {			-- 装备穿上界面		tag = 1014,		PopUp = true,		jsonFile = "Backpack_Equip_put.json",		focus = true,		tb = LayerEquipPut	},	["UI_Equip_Noput"] = {			-- 装备没有穿上界面		tag = 1015,		PopUp = true,		jsonFile = "Backpack_Equip_no_put.json",		focus = true,		tb = LayerEquipNoPut	},	["UI_GemInfo_Long"] = {			-- 宝石详细信息界面(长按功能)		tag = 1016,		PopUp = true,		jsonFile = "GemInfo_Long.json",		focus = false,		tb = LayerGemInfo	},	["UI_ItemInfo_Long"] = {				-- 物品的详细信息(长按功能)		tag = 1017,		PopUp = false,		jsonFile = "ItemInfo_Long.json",		focus = false,		tb = LayerItemInfo	},	["UI_SkillInfo_Long"] = {				-- 技能的详细信息(长按功能)		tag = 1018,		PopUp = false,		jsonFile = "SkillInfo_Long.json",		focus = false,		tb = LayerSkillInfoLong	},	["UI_SkillFragInfo_Long"] = {				-- 碎片的详细信息(长按功能)		tag = 1019,		PopUp = false,		jsonFile = "SkillFrag_long.json",		focus = false,		tb = LayerSkillFragInfoLong	},	["UI_PowerPh"] = {							-- 体力奖励		tag = 1020,		PopUp = true,		jsonFile = "PowerHp.json",		focus = true,		tb = LayerPowerHp	},	["UI_Smith_upGrade"] = {				-- 铁匠铺装备进阶		tag = 1021,		PopUp = false,		jsonFile = "Smith_Equip_Upgrade.json",		status = "onSleep",		focus = true,		tb = LayerSmithUpgrade	},	["UI_Smith_GemInlayInfo"] = {			-- 铁匠铺宝石镶嵌详细信息界面		tag = 1022,		PopUp = false,		jsonFile = "Smith_Equip_GemInlay.json",		status = "onSleep",		focus = true,		tb = LayerSmithGemInfo	},	["UI_Notice"] = {							-- 公告		tag = 1023,		PopUp = true,		jsonFile = "NoticeBackgournd_1.json",		focus = true,		tb = LayerNotice	},	["UI_Contact"] = {			-- 联系客服		tag = 1024,		PopUp = true,		jsonFile = "ContactCustomerService_1.json",		focus = true,		tb = LayerContact	},	["UI_Smith_Equip_sure"] = {			-- 装备的详细信息(带确定功能)		tag = 1025,		PopUp = false,		jsonFile = "Backpack_Equip_sure.json",		focus = true,		tb = LayerSmithEquipInfo	},	["UI_Smith_Upgrade_Info"] = {			-- 装备升阶动画界面		tag = 1026,		PopUp = false,		jsonFile = "Smith_Upgrade_Info.json",		focus = true,		tb = LayerSmithUpgradeInfo	},	["UI_RuneShow"] = {						-- 召唤新窗口展示		tag = 1027,		PopUp = true,		jsonFile = "Rune_3.json",		focus = true,		tb = LayerRuneShow	},    ["UI_GroupMatchFailure"] = {						-- 3V3挑战失败		tag = 1028,		PopUp = true,		jsonFile = "groupMatchFailure_1.json",		focus = true,		tb = LayerGroupMatchFailure	},    ["UI_GroupMatchVictory"] = {						-- 3V3挑战成功		tag = 1029,		PopUp = true,		jsonFile = "groupMatchVictory_1.json",		focus = true,		tb = LayerGroupMatchVictory	},	["UI_PayByEmoney"] = {								-- 魔石购买		tag = 1030,		jsonFile = "PayConsume_1.json",		focus = true,		tb = LayerPayByEmoney	},	["UI_PayByRMB"] = {									-- RMB支付		tag = 1031,		jsonFile = "PayConsume_2.json",		focus = true,		tb = LayerPayByRMB	},	["UI_GameMedal"] = {											--	竞技场勋章		tag = 1032,		jsonFile = "GameMedal_1.json",		focus = true,		tb = LayerGameMedal	},}------------------------------------------------------------------------ 界面跟节点堆栈local mLayerStack = {}-- 是否存在界面local function exsitLayer(rootLayer)	for key, val in pairs(mLayerStack) do		if rootLayer == val.uiLayer then 			return true		end 	end	return falseend-- 注册界面local function registerUI(targetName)	local layerRoot = UILayer:create()	layerRoot:setTag(UIManager_UItable[targetName].tag)	layerRoot:setZOrder(0)	g_uiRoot:addChild(layerRoot)	return layerRootend-- 创建界面local function createUI(targetName, bundle)	local targetTable = UIManager_UItable[targetName].tb	local rootLayer = UIManager.findLayerByTag(targetName)	-- 预先加载资源	if "function" == type(targetTable.loadResource) then		targetTable.loadResource()	end	if nil == rootLayer then 		cclog("create layer -> ", targetName)		rootLayer = registerUI(targetName)		if nil == UIManager_UItable[targetName].jsonFile then			rootLayer:addWidget(UIManager_UItable[targetName].tb.create())		else			local defaultPixelFormat = CCTexture2D:defaultAlphaPixelFormat()			CCTexture2D:setDefaultAlphaPixelFormat(6)			local widget = GUIReader:shareReader():widgetFromJsonFile(UIManager_UItable[targetName].jsonFile)			rootLayer:addWidget(widget)			CCTexture2D:setDefaultAlphaPixelFormat(defaultPixelFormat)		end	else		rootLayer:setTouchEnabled(true)		rootLayer:setVisible(true)	end	if false == exsitLayer(rootLayer) then		local uiInfo = {}		uiInfo.targetName = targetName		uiInfo.uiLayer = rootLayer		table.insert(mLayerStack, uiInfo)		targetTable.init(bundle)	end	return rootLayerend-- 销毁界面local function destroyUI(targetName)	cclog("destory layer -> ", targetName)	g_uiRoot:removeChildByTag(UIManager_UItable[targetName].tag, true)	if "function" == type(UIManager_UItable[targetName].tb.destroy) then		UIManager_UItable[targetName].tb.destroy()	end	UIManager_UItable[targetName].tb.Timer = false	table.remove(mLayerStack)end-- 销毁所有界面UIManager.destroyAllUI = function()	setConententPannelJosn(nil, nil, nil)	LayerMainEnter.destroy()	LayerGameUI.destroy()	fourFrames.release()	for key, val in pairs(UIManager_UItable) do		if "function" == type(val.tb.destroy) then			val.tb.destroy()		end		val.tb.Timer = false	end	for key, val in pairs(mLayerStack) do		g_uiRoot:removeChild(val.uiLayer, true)	end	while #mLayerStack > 0 do		table.remove(mLayerStack)	end	CCSpriteFrameCache:sharedSpriteFrameCache():removeSpriteFrames()	CCTextureCache:sharedTextureCache():removeAllTextures()end-- 界面推入UIManager.push = function(targetName, bundle)	initUIViewDate()	if mLayerStack[#mLayerStack] then 		if true == UIManager_UItable[targetName].focus then			mLayerStack[#mLayerStack].uiLayer:setTouchEnabled(false)		end	end	createUI(targetName, bundle)	if true == UIManager_UItable[targetName].PopUp then		Audio.playEffectByTag(6)		-- 弹框声音		local rootUILayer = UIManager.findLayerByTag(targetName)		local rootWidget = rootUILayer:getWidgetByName("rootview")		if nil == rootWidget then			cclog("请把cocostidio工程跟节点名字设成-<rootview>-")		else			rootWidget:registerEventScript(function(typeName, widget)				if "releaseUp" == typeName then 					UIManager.pop(targetName) 				end			end)		end	endend-- 界面出栈UIManager.pop = function(destroyName)	if nil == UIManager.findLayerByTag(destroyName) then		return	end	if nil == UIManager_UItable[destroyName] then		mLayerStack[#mLayerStack].uiLayer:setEnabled(false)		mLayerStack[#mLayerStack].uiLayer:setVisible(false)		table.remove(mLayerStack)	else		destroyUI(destroyName)	end	if #mLayerStack > 0 then         if tolua.isnull(mLayerStack[#mLayerStack].uiLayer) then             return        end 		mLayerStack[#mLayerStack].uiLayer:setTouchEnabled(true)	endend-- 获取顶层界面UIManager.getTopLayer = function()	if 0 == #mLayerStack then		return nil	end	return mLayerStack[#mLayerStack].uiLayerend-- 获取顶层界面名UIManager.getTopLayerName = function()	local topLayer = mLayerStack[#mLayerStack].uiLayer	if nil == topLayer then		return	end	local tag = topLayer:getTag()	for key, value in pairs(UIManager_UItable) do		if tag == value.tag then			return key		end	endend-- 获取当前UI个数UIManager.getLayerCount = function()	return #mLayerStackend-- 获取界面根节点UIManager.findLayerByTag = function(targetName)	return tolua.cast(g_uiRoot:getChildByTag(UIManager_UItable[targetName].tag), "UILayer")end------------------------------------------------------------------------ 控制所有界面隐藏local mEnableAllUI = true-- 是否所有界面都被显示UIManager.isAllUIEnabled = function()	return mEnableAllUIend-- 设置所有界面隐藏/显示UIManager.setAllUIEnabled = function(enable)	mEnableAllUI = enable	for key, value in pairs(mLayerStack) do		value.uiLayer:getRootWidget():setEnabled(enable)	endend------------------------------------------------------------------------ 进入战斗入口类型local mEnterFightType = ""-- 设置进入战斗入口类型UIManager.setEnterFightType = function(fightType)	mEnterFightType = fightTypeend-- 返回主界面eventType:事件类型,param:参数需求UIManager.retrunMain = function(eventType, param)	UIManager.setAllUIEnabled(true)				-- UI	g_sceneUIRoot:setVisible(false)					-- 主战UI	if LayerGameUI.mRootView then 		LayerGameUI.mRootView:setTouchEnabled(false)	end	g_sceneRoot:removeAllChildrenWithCleanup(true)	-- 主战地图	g_sceneRoot:setVisible(false)					-- 主战地图	LayerMain.onEventForResult(eventType, param, mEnterFightType)	mEnterFightType = ""	Audio.playBgMscByTag(3)		-- 主页音乐	-- 战斗中加载公告的信息	local rootNode = UIManager.findLayerByTag("UI_Main")	if rootNode then		NoticeLogic.setBroading(false)		local imgPostBg = rootNode:getWidgetByName("systempenel")		Toast.showNotice(imgPostBg, imgPostBg:getSize().width - 62, imgPostBg:getSize().height - 10, ccp(62, 4))	endend------------------------------------------------------------------------ 主动弹框管理 local mBouncedWindowCache = {}-- 添加主动弹框界面UIManager.addBouncedWindow = function(target)	-- 解决升级弹出最新界面的问题(背包需要把几次的物品全部传进来)	for key, val in pairs(mBouncedWindowCache) do		if val.targetName == target.targetName then			table.remove(mBouncedWindowCache, key)			break		end	end	table.insert(mBouncedWindowCache, target)end-- 弹出缓存里面的一个界面UIManager.popBounceWindow = function(targetName)	for key, val in pairs(mBouncedWindowCache) do		if val.targetName == targetName then			UIManager.push(val.targetName, val.param)			table.remove(mBouncedWindowCache, key)			return true		end	end	return falseend------------------------------------------------------------------------ 注册控件事件:widget-控件,shortClick:单击回调,longTriggerClick:长按触发回调,longEndClick:长按结束回调UIManager.registerEvent = function(widget, shortClick, longTriggerClick, longEndClick)	if nil == widget then		return	end	local longClickStatus = 0	-- 长按状态:0.未按下,1.开始长按,2.长按中	local function eventCallBack(typeName, sender)		local function checkLongClickStatus()			if 1 == longClickStatus then				longClickStatus = 0				sender:stopActionByTag(88888)			elseif 2 == longClickStatus then				longClickStatus = 0				if "function" == type(longEndClick) then					longEndClick(sender)				end				return true			end			return false		end		if "pushDown" == typeName then			if 0 == longClickStatus and "function" == type(longTriggerClick) then				longClickStatus = 1				local longAction = CCSequence:createWithTwoActions(CCDelayTime:create(0.25), CCCallFunc:create(function()					if 1 == longClickStatus then						longClickStatus = 2						longTriggerClick(sender)					end				end))				longAction:setTag(88888)				sender:runAction(longAction)			end		elseif "releaseUp" == typeName then			if checkLongClickStatus() then				return			end			if "function" == type(shortClick) then				shortClick(sender)			end		elseif "cancelUp" == typeName then			checkLongClickStatus()		end	end	widget:registerEventScript(eventCallBack)end----------------------------------------------------------------------UIManager.begin = function(isLoginOk, isShowLogin)	LoadPublicResouse()			-- 异步加载公用资源	Audio.playBgMscByTag(4)		-- 登入音乐	if true == isLoginOk then		-- UIManager.push("UI_Begin")		chooseServerDataCache.getChannelServerList()		return	end	if true == ChannelProxy.isOwnLogin() then		UIManager.push("UI_LoginOwn")	else		UIManager.push("UI_LoginChannel")        if true == isShowLogin then            ChannelProxy.login()        end	endend----------------------------------------------------------------------