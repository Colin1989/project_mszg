------------------------------------------------------------------------ 作者：hezhr-- 日期：2014-06-10-- 描述：自动更新----------------------------------------------------------------------local mTotalSize = 0				-- 总大小local mPreDownloadSize = 0			-- 预下载的大小local mDownloadSize = 0				-- 从开始下载到当前已经下载的大小local mCurDownloadSize = 0			-- 正在下载文件的已下载大小local mUpdateEndCallback = nil		-- 更新结束回调local mUpdateHandler = nil			-- 每帧更新句柄local mUpdateDeltaHandler = nil		-- 每指定间隔更新句柄-- 界面控件local mRootNode = nillocal mUIChildren = {}------------------------------------------------------------------------ 显示错误日志local function showError(errorBuffer, errorType)	local errorHeader = ""	if 1 == errorType then			-- 版本检测失败		errorHeader = "版本检测失败"	elseif 2 == errorType then		-- 更新列表检测失败		errorHeader = "更新列表检测失败"	elseif 3 == errorType then		-- 文件下载出错		errorHeader = "文件下载出错"	end	-- 出错提示	if true == CONFIG["update_show_error_log"] then		local infos = require("json").decode(errorBuffer)		local tipText = errorHeader		tipText = tipText.."\n"..infos["url"]		tipText = tipText.."\n"..infos["curl_code"]		tipText = tipText..","..infos["response_code"]		tipText = tipText.."\n"..infos["error"]		AutoUpdate_showTipPanel(tipText, errorType)	else		AutoUpdate_showTipPanel(errorHeader.."\n\n请检查网络连接情况", errorType)	endend------------------------------------------------------------------------ 版本检测失败function AutoUpdate_onCheckVersionFailed(errorBuffer)	cclog("auto update on check version failed: "..errorBuffer)	showError(errorBuffer, 1)end------------------------------------------------------------------------ 发现新版本function AutoUpdate_onNewVersion(curVersion, newVersion)	cclog("auto update on new version, curVersion: "..curVersion..", newVersion: "..newVersion)	ResUpdate.checkUpdate()end------------------------------------------------------------------------ 没有新版本function AutoUpdate_onNoNewVersion(curVersion)	cclog("auto update no new version, curVersion:  "..curVersion)	VERSION_UPDATE = false	AutoUpdate_end()end------------------------------------------------------------------------ 更新列表检测失败function AutoUpdate_onCheckUpdateListFailed(errorBuffer)	cclog("auto update on check update list failed: "..errorBuffer)	showError(errorBuffer, 2)end------------------------------------------------------------------------ 发现更新列表function AutoUpdate_onUpdateList(updateCount, updateSize)	cclog("auto update on update list, count: "..tostring(updateCount)..", size: "..tostring(updateSize))	mTotalSize = updateSize	AutoUpdate_setUIVisible(true)	ResUpdate.startUpdate()end------------------------------------------------------------------------ 没有更新列表function AutoUpdate_onNoUpdateList()	cclog("auto update on no update list")	VERSION_UPDATE = false	AutoUpdate_end()end------------------------------------------------------------------------ 单个文件下载进度function AutoUpdate_onPogress(fileURL, totalSize, curSize)	-- cclog("auto update on progress, fileURL"..fileURL..", totalSize: "..tostring(totalSize)..", curSize: "..tostring(curSize))	mCurDownloadSize = curSize	local cur = mDownloadSize + curSize	local total = mPreDownloadSize + mTotalSize	local percentF = cur/total	if percentF > 100 then		percentF = 0.0	end	local percentBuf = string.format("%0.2f%s", percentF*100, "%")	mUIChildren["progress_bar"]:setScaleX(percentF)	mUIChildren["progress_text"]:setString(percentBuf)end------------------------------------------------------------------------ 单个文件下载完成function AutoUpdate_onSuccess(fileURL)	-- cclog("auto update on success, fileURL: "..fileURL)	mDownloadSize = mDownloadSize + mCurDownloadSizeend------------------------------------------------------------------------ 文件列表下载进度function AutoUpdate_onTotalProgress(fileURL, totalCount, curCount)	-- cclog("auto update on total progress, fileURL: "..fileURL..", totalCount: "..tostring(totalCount)..", curCount: "..tostring(curCount))end------------------------------------------------------------------------ 所有文件下载完成function AutoUpdate_onTotalSuccess()	cclog("auto update on total success")	VERSION_UPDATE = true	AutoUpdate_end()end------------------------------------------------------------------------ 文件下载出错function AutoUpdate_onError(fileURL, errorBuffer)	cclog("auto update on error, fileURL: "..fileURL..", errorBuffer: "..errorBuffer)	showError(errorBuffer, 3)	mPreDownloadSize = mDownloadSize	ResUpdate.record()end------------------------------------------------------------------------ 每帧更新function AutoUpdate_update(dt)	ResUpdate.listen()end------------------------------------------------------------------------ 每指定帧间隔更新function AutoUpdate_updateDelta(dt)	ResUpdate.record()end------------------------------------------------------------------------ 执行更新function AutoUpdate_excute()	local listenerTable = 	{		"AutoUpdate_onCheckVersionFailed",		"AutoUpdate_onNewVersion",		"AutoUpdate_onNoNewVersion",		"AutoUpdate_onCheckUpdateListFailed",		"AutoUpdate_onUpdateList",		"AutoUpdate_onNoUpdateList",		"AutoUpdate_onPogress",		"AutoUpdate_onSuccess",		"AutoUpdate_onTotalProgress",		"AutoUpdate_onTotalSuccess",		"AutoUpdate_onError"	}	for key, value in pairs(listenerTable) do		ResUpdate.addListener(key, value)	end	ResUpdate.checkVersion(CONFIG["update_url"], "CheckVersion.txt", "CheckFileList.txt")end------------------------------------------------------------------------ 开始更新function AutoUpdate_start(callback)	mUpdateEndCallback = callback	mRootNode = CCScene:create()	if nil == CCDirector:sharedDirector():getRunningScene() then		CCDirector:sharedDirector():runWithScene(mRootNode)	else		CCDirector:sharedDirector():replaceScene(mRootNode)	end	mUpdateHandler = CCDirector:sharedDirector():getScheduler():scheduleScriptFunc(AutoUpdate_update, 0, false)	mUpdateDeltaHandler = CCDirector:sharedDirector():getScheduler():scheduleScriptFunc(AutoUpdate_updateDelta, 15, false)	mUIChildren = AutoUpdate_createUI()	AutoUpdate_setUIVisible(false)	AutoUpdate_excute()end------------------------------------------------------------------------ 更新结束function AutoUpdate_end()	CCDirector:sharedDirector():getScheduler():unscheduleScriptEntry(mUpdateHandler)	CCDirector:sharedDirector():getScheduler():unscheduleScriptEntry(mUpdateDeltaHandler)	if "function" == type(mUpdateEndCallback) then		mUpdateEndCallback()		mUpdateEndCallback = nil	endend------------------------------------------------------------------------ 创建更新界面function AutoUpdate_createUI()	local winSize = CCDirector:sharedDirector():getWinSize()	--	local ui = CCLayer:create()	mRootNode:addChild(ui)	-- 背景	local backgroundSprite = CCSprite:create("Register.png")	backgroundSprite:setAnchorPoint(ccp(0.5, 0.5))	backgroundSprite:setPosition(ccp(winSize.width/2, winSize.height/2))	ui:addChild(backgroundSprite)	-- 图片	local imageSprite = CCSprite:create("au_image_01.png")	imageSprite:setPosition(ccp(winSize.width/2, 100))	ui:addChild(imageSprite)	-- 进度条	local progressBar = CCSprite:create("au_progress_bar.png")	progressBar:setAnchorPoint(ccp(0, 0.5))	local barSize = progressBar:getContentSize()	progressBar:setPosition(ccp(winSize.width/2 - barSize.width/2, 50))	progressBar:setScaleX(0.0)	ui:addChild(progressBar)	-- 进度条背景,放在进度条上面	local progressBackground = CCSprite:create("au_progress_bg.png")	progressBackground:setPosition(ccp(winSize.width/2, 50))	ui:addChild(progressBackground)	-- 进度	local progressText = CCLabelTTF:create("0%", "Arial", 20)	progressText:setPosition(ccp(winSize.width/2, 50))	ui:addChild(progressText)	-- 返回值	local children = {}	children["root"] = ui	children["background"] = backgroundSprite	children["image"] = imageSprite	children["progress_bg"] = progressBackground	children["progress_bar"] = progressBar	children["progress_text"] = progressText	return childrenend------------------------------------------------------------------------ 初始化更新界面function AutoUpdate_setUIVisible(visible)	mUIChildren["image"]:setVisible(visible)	mUIChildren["progress_bg"]:setVisible(visible)	mUIChildren["progress_bar"]:setVisible(visible)	mUIChildren["progress_text"]:setVisible(visible)end------------------------------------------------------------------------ 显示弹出框function AutoUpdate_showTipPanel(tipText, errorType)	local tipLabel = nil	local tipPanelRoot = tolua.cast(mRootNode:getChildByTag(10000), "UILayer")	if nil == tipPanelRoot then		tipPanelRoot = UILayer:create()		tipPanelRoot:setTag(10000)		mRootNode:addChild(tipPanelRoot)		-- 背景框		local tipPanel = UIImageView:create()		tipPanel:loadTexture("au_tip_panel.png")		tipPanel:setScale9Enabled(true)		tipPanel:setCapInsets(CCRectMake(85, 85, 1, 1))		tipPanel:setSize(CCSizeMake(420, 260))		tipPanel:setAnchorPoint(ccp(0.5, 0.5))		tipPanel:setPosition(ccp(320, 480))		tipPanelRoot:addWidget(tipPanel)		-- 提示文本		tipLabel = UILabel:create()		tipLabel:setFontName("Arial")		tipLabel:setFontSize(22)		tipLabel:setColor(ccc3(255, 255, 255))		tipLabel:setTextAreaSize(CCSizeMake(350, 175))		tipLabel:setTextVerticalAlignment(kCCVerticalTextAlignmentCenter)		tipLabel:setTextHorizontalAlignment(kCCTextAlignmentLeft)		tipLabel:setAnchorPoint(ccp(0.5, 1.0))		tipLabel:setPosition(ccp(330, 625))		tipLabel:setName("tip_label")		tipPanelRoot:addWidget(tipLabel)		-- 更新按钮		local updateButton = UIButton:create()		updateButton:loadTextureNormal("au_execute_btn.png", UI_TEX_TYPE_LOCAL)		updateButton:loadTexturePressed("au_execute_btn.png", UI_TEX_TYPE_LOCAL)		if 3 == errorType then			updateButton:setTitleText("重新更新")		else			updateButton:setTitleText("重新检测")		end		updateButton:setTitleFontSize(26)		updateButton:setPosition(ccp(320, 425))		updateButton:setTouchEnabled(true)		updateButton:registerEventScript(function(typename, widget)			if "releaseUp" == typename then				tipPanelRoot:setVisible(false)				AutoUpdate_excute()			end		end)		tipPanelRoot:addWidget(updateButton)	end	tipLabel = tolua.cast(tipPanelRoot:getWidgetByName("tip_label"), "UILabel")	tipLabel:setText(tipText)	tipPanelRoot:setVisible(true)end----------------------------------------------------------------------