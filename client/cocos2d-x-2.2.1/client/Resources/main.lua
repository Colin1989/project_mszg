------------------------------------------------------------------------ 作者：hezhr-- 日期：2013-11-27-- 描述：脚本入口----------------------------------------------------------------------local mTargetPlatform = CCApplication:sharedApplication():getTargetPlatform()local mFirstFlag = true		-- 程序刚启动local mRunParam = nil		-- 运行参数CONFIG = {}					-- 应用配置表(读取json配置文件)VERSION_UPDATE = false		-- 是否有更新到新内容LOGIN_OK = false			-- 是否登录成功SHOW_LOGIN = false          -- 是否显示渠道登录页面------------------------------------------------------------------------ 开始内存回收local function startCollectGarbage()	collectgarbage("restart")	collectgarbage("collect")	collectgarbage("setpause", 100)    collectgarbage("setstepmul", 500)end------------------------------------------------------------------------ 停止垃圾回收local function stopCollectGarbage()	collectgarbage("stop")end------------------------------------------------------------------------ 加载配置local function loadConfig()	require("ChannelProxy")	local configTable = require("json").decode(getFileString("config.json"))	local channelId = ChannelProxy.getChannelId()	print("channel id: "..tostring(channelId))	CONFIG = configTable[channelId] or {}	print("================================================== config:")	for key, val in pairs(CONFIG) do		print("["..key.."] = ", val)	end	print("==========================================================")end------------------------------------------------------------------------ 功  能：for CCLuaEngine traceback，异常出错信息-- 参  数：错误信息-- 返回值：无function __G__TRACKBACK__(msg)	CCDirector:sharedDirector():pause()	print("\n\n")	print("[LUA ERROR]"..tostring(msg).."\n")	print(debug.traceback())	print("\n\n")end------------------------------------------------------------------------ 功  能：调用函数,自动捕捉异常错误-- 参  数：全局函数-- 返回值：无function globalcall(globalFunc)	xpcall(globalFunc, __G__TRACKBACK__)end------------------------------------------------------------------------ 功  能：重新加载文件-- 参  数：全局函数-- 返回值：无function reload(fileName)	package.loaded[fileName] = nil	require(fileName)end------------------------------------------------------------------------ 功  能：打印log-- 参  数：信息-- 返回值：无function cclog(...)	if true == CONFIG["debug"] then		print(...)	endend------------------------------------------------------------------------ 功  能：主函数入口-- 参  数：无-- 返回值：无返回值function main()	startCollectGarbage()	CCEGLView:sharedOpenGLView():setDesignResolutionSize(640, 960, kResolutionShowAll)	CCFileUtils:sharedFileUtils():addSearchPath("Script")	CCFileUtils:sharedFileUtils():addSearchPath("Picture")	loadConfig()	if kTargetWindows == mTargetPlatform then		runScripts("{\"is_login_ok\":false,\"is_show_login\":false}")	elseif kTargetAndroid == mTargetPlatform then		CCDirector:sharedDirector():runWithScene(CCScene:create())		CCDirector:sharedDirector():getScheduler():scheduleScriptFunc(function(dt)			if mRunParam then				runScripts(mRunParam)				mRunParam = nil			end		end, 0, false)		ChannelProxy.notifyLuaExecuted()	endend------------------------------------------------------------------------ 设置脚本运行参数function setRunParam(param)	mRunParam = paramend------------------------------------------------------------------------ 运行游戏逻辑function runScripts(param)	local paramTb = require("json").decode(param)	LOGIN_OK = paramTb.is_login_ok    SHOW_LOGIN = paramTb.is_show_login	-- 手机平台需要执行更新操作	local needUpdate = false	if kTargetAndroid == mTargetPlatform or kTargetIpad == mTargetPlatform or kTargetIphone == mTargetPlatform then		needUpdate = true	end	if true == mFirstFlag and true == needUpdate then		runForceUpdate()	else		runGame()	end	mFirstFlag = falseend------------------------------------------------------------------------ 运行强制更新function runForceUpdate()	require("ForceUpdate")	ForceUpdate_start(runAutoUpdate)end------------------------------------------------------------------------ 运行自动更新function runAutoUpdate()	require("AutoUpdate")	AutoUpdate_start(runGame)end------------------------------------------------------------------------ 运行游戏function runGame()	CCFileUtils:sharedFileUtils():purgeCachedEntries()	loadConfig()	require("Game")	globalcall(Game_start)end-- 二次登入游戏 function secondLogin(param)    local runningScene = CCDirector:sharedDirector():getRunningScene()
    --CCSequence:createWithTwoActions(CCDelayTime:create(0.5),CCCallFuncN:create(pushAction))
	runningScene:runAction(CCSequence:createWithTwoActions(CCDelayTime:create(0.1), CCCallFunc:create(function()
			NetHelper.close()
	        UIManager.destroyAllUI()
	        UIManager.begin(true)
	end)))end----------------------------------------------------------------------globalcall(main)----------------------------------------------------------------------