------------------------------------------------------------------------ 作者：lewis hamilton-- 日期：2014-03-03-- 描述：技能配置信息----------------------------------------------------------------------GameSkillMgr = {}local g_active_idx = -1local g_skill_count = 4local g_skill_handle_count = 1local g_handle_table = {}local g_main_info = {	{skillID = 1, cdCount  = -1},	{skillID = 4, cdCount  = -1},	{skillID = 3, cdCount  = -1},	{skillID = 4, cdCount  = -1},}local g_buff_table = {}local g_skill_play_queue = {}function GameSkillMgr.addSkill(handleID, skillID)end--获得可使用技能个数function GameSkillMgr.getSkillCount()	return g_skill_countend--通过索引获得技能IDfunction GameSkillMgr.getSkillIDWithIndex(idx)	return g_main_info[idx].skillIDendlocal g_AutoStartSkillStartListener = nilfunction GameSkillMgr.setAutoStartSkillStartListener(listenerFun)	g_AutoStartSkillStartListener = listenerFunend--激活技能function GameSkillMgr.activeSkillWithIndex(idx)	g_active_idx = idx	if g_active_idx <= 0 then		return false	end	local skillID = g_main_info[g_active_idx].skillID	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	local bRet = false	print("skillBaseInfo.target: "..skillBaseInfo.target)	if skillBaseInfo.target == 4 or skillBaseInfo.target == 1 then		if g_AutoStartSkillStartListener ~= nil then			bRet = g_AutoStartSkillStartListener(skillID, skillBaseInfo.target)		end	end		if bRet then		GameSkillMgr.startPlayerSkill()	end	return bRetendlocal g_start_buff_effect_listener = nilfunction GameSkillMgr.setStartBuffEffectListener(listenerFun)	g_start_buff_effect_listener = listenerFunendlocal g_buff_end_listener = nilfunction GameSkillMgr.setBuffEndListener(listenerFun)	g_buff_end_listener = listenerFunend--设置获取施法目标的接口local g_get_target_delegate = nilfunction GameSkillMgr.setGetTargetDelegate(delegate)	g_get_target_delegate = delegateend--技能施放完成function GameSkillMgr.skillEffectDone(handleID, skillID)	for key, element in ipairs(g_handle_table) do		if element.handleID == handleID then			local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)			if skillBaseInfo == nil then				return			end						local shaderName = nil			local buffID = skillBaseInfo.buff_id			local buffInfo = GameSkillConfig.getSkillBuffInfo(buffID)			if buffInfo ~= nil then shaderName = buffInfo.shader_name end						if buffID ~= 0 then				g_start_buff_effect_listener(element.sprite, buffID, buffInfo.buff_type, buffInfo.duration, 											buffInfo.shader_name, buffInfo.modify_attribute, buffInfo.modify_value, element.userData.target)			end						if element.userData.skilEffectDoneCB ~= nil then				element.userData.skilEffectDoneCB(element.sprite, shaderName, skillBaseInfo.base_damage, skillBaseInfo.bonus_damage, element.userData)			end					table.remove(g_handle_table, key)			break		end	end	g_active_idx = -1end--初始化function GameSkillMgr.init(skillid_vec)	GameSkillConfig.loadConfig()	GameSkillMgr.loadAllResource()	g_skill_count = 0	print("table length>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"..#skillid_vec)	for key, value in pairs(skillid_vec) do		g_main_info[key].skillID = value + 0		g_main_info[key].cdCount = -1		g_skill_count = g_skill_count + 1	end	--g_skill_count = 2	--GameSkillMgr["test"] = 10000	--print("GameSkillMgr.test "..GameSkillMgr.test)end--function GameSkillMgr.reset()	for key, value in pairs(g_main_info) do		value.cdCount = -1	end	GameSkillMgr.step("normal")end--加载技能用到的所有资源function GameSkillMgr.loadAllResource()	local function loadPlistFile(name)		--print("load plist file "..name)		CCSpriteFrameCache:sharedSpriteFrameCache():addSpriteFramesWithFile(name)	end		local skillCount = GameSkillMgr.getSkillCount()	for i = 1, skillCount do		local skillID = GameSkillMgr.getSkillIDWithIndex(i)		local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)		if skillBaseInfo ~= nil then			if skillBaseInfo.fly_effect_id ~= 0 then				local flyEffectInfo = GameSkillConfig.getSkillEffectInfo(skillBaseInfo.fly_effect_id)				if flyEffectInfo ~= nil then					loadPlistFile(flyEffectInfo.plist_name)				end			end						if skillBaseInfo.front_effect_id ~= 0 then				local frontEffectInfo = GameSkillConfig.getSkillEffectInfo(skillBaseInfo.front_effect_id)				if frontEffectInfo ~= nil then					loadPlistFile(frontEffectInfo.plist_name)				end			end						if skillBaseInfo.back_effect_id ~= 0 then				local backEffectInfo = GameSkillConfig.getSkillEffectInfo(skillBaseInfo.back_effect_id)				if backEffectInfo ~= nil then					loadPlistFile(backEffectInfo.plist_name)				end			end		end	endend--stepfunction GameSkillMgr.step(skillStepName)	print("skill step name.."..skillStepName)	for i = 1, g_skill_count do		local skillInfo = g_main_info[i]			local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillInfo.skillID)		if skillBaseInfo ~= nil then						--计算技能cd			if skillInfo.cdCount >= 0 then				if skillStepName == "normal" then					skillInfo.cdCount = skillInfo.cdCount + 1				elseif skillStepName == "max_cd" then					skillInfo.cdCount = 0				elseif skillStepName == "silenced" then					skillInfo.cdCount = skillInfo.cdCount				end								local totalCDCount = skillBaseInfo.skill_cd				if skillInfo.cdCount >= totalCDCount then					GameSkillBarLayer.updateBtn(i, 1.0)					skillInfo.cdCount = -1				else					GameSkillBarLayer.updateBtn(i, skillInfo.cdCount / totalCDCount)				end			else				GameSkillBarLayer.updateBtn(i, 1.0)			end		end	endendfunction GameSkillMgr.isUseSingleMonsterTargetSkill()	if g_active_idx <= 0 then		print("haven't active skill button")		return false, 0, 0	end	local skillID = g_main_info[g_active_idx].skillID	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	if skillBaseInfo.target ~= 2 then		return false, 0, 0	end	return true, skillID, skillBaseInfo.targetendfunction GameSkillMgr.startPlayerSkill()	g_main_info[g_active_idx].cdCount = 0	GameSkillBarLayer.updateBtn(g_active_idx, 0.0)	GameSkillBarLayer.refreshData()endfunction GameSkillMgr.playerMagicTargetJudge(skillID)	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	if skillBaseInfo == nil then		print("no skill id for monster"..skillID)		return "none"	end		if skillBaseInfo.target == 1 then		return "player"	else		return "monster"	endendfunction GameSkillMgr.startWithSingleTarget(skillID, userData)	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	local x, y	x, y = userData.targetSprite:getPosition()	local size = userData.targetSprite:getContentSize()	y = y + size.height * 0.2	GameSkillEffectLayer.play(g_skill_handle_count, skillID, ccp(100, 100), ccp(x, y))	local handleInfo = {handleID = nil, sprite = nil, userData = nil}	handleInfo.handleID = g_skill_handle_count	handleInfo.sprite = userData.targetSprite	handleInfo.userData = userData	table.insert(g_handle_table, handleInfo)		g_skill_handle_count = g_skill_handle_count + 1end--start skillfunction GameSkillMgr.startWithUseSkillForPlayer(skillID, userData)	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	if skillBaseInfo == nil then		print("no skill id for monster"..skillID)		return	end	local x, y	x, y = userData.targetSprite:getPosition()	local fx, fy	if userData.fromSprite ~= nil then		fx, fy = userData.fromSprite:getPosition()	else		fx = 0		fy = 0	end	GameSkillEffectLayer.play(g_skill_handle_count, skillID, ccp(fx, fy), ccp(x, y))	local handleInfo = {handleID = nil, sprite = nil, userData = nil}	handleInfo.handleID = g_skill_handle_count	handleInfo.sprite = userData.targetSprite	handleInfo.userData = userData	table.insert(g_handle_table, handleInfo)		g_skill_handle_count = g_skill_handle_count + 1end--获得技能cdfunction GameSkillMgr.getSkillCD(skillID)	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	if skillBaseInfo == nil then return -1 end	return skillBaseInfo.skill_cdend--判定施法者与被击者关系function GameSkillMgr.makeUserData(caster, skillID, monsterSprite, playerSprite, userData)	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	if skillBaseInfo == nil then return false end	if caster == "player" then		userData.caster = caster		userData.fromSprite = playerSprite		if skillBaseInfo.target == 1 or skillBaseInfo.target == 3 then			userData.targetSprite = playerSprite			userData.target = "player"		else			userData.targetSprite = monsterSprite			userData.target = "monster"		end	elseif caster == "monster" then		userData.caster = caster		userData.fromSprite = monsterSprite		if skillBaseInfo.target == 1 or skillBaseInfo.target == 3 then			userData.targetSprite = monsterSprite			userData.target = "monster"		else			userData.targetSprite = playerSprite			userData.target = "player"		end	elseif caster == "prop" then		userData.caster = caster		userData.fromSprite = monsterSprite			userData.targetSprite = playerSprite		userData.target = "player"	end	return trueend--判定配置表中是否存在此技能IDfunction GameSkillMgr.isExsitSkillID(skillID)	local skillBaseInfo = GameSkillConfig.getSkillBaseInfo(skillID)	if skillBaseInfo == nil then 		return false 	end	return trueend--解析状态字段function GameSkillMgr.parseStatusString(modifyTable, nameStr, valueStr)	local split_char = ','	print("modify_attribute set "..nameStr.." modify_value set "..valueStr)	local bEnd = false	while (true) do		--name		local modifyUnit = 		{			modifyAttribute = "nil",			modifyValue = 0,		}		local posName = string.find(nameStr, split_char)		if (not posName) then			bEnd = true			modifyUnit.modifyAttribute = nameStr		else			modifyUnit.modifyAttribute = string.sub(nameStr, 1, posName - 1)		end							--value		local posValue = string.find(valueStr, split_char)		if (not posValue) then			bEnd = true			modifyUnit.modifyValue = valueStr + 0		else			modifyUnit.modifyValue = string.sub(valueStr, 1, posValue - 1) + 0		end		print("modify_attribute "..modifyUnit.modifyAttribute.." modify_value "..modifyUnit.modifyValue)		table.insert(modifyTable, modifyUnit)							if bEnd then			break		else			nameStr = string.sub(nameStr, posName + 1, #nameStr)			valueStr = string.sub(valueStr, posValue + 1, #valueStr)		end	endend--开启buff状态function GameSkillMgr.startBuff(sprite, buffID)	local buffInfo = GameSkillConfig.getSkillBuffInfo(buffID)	if buffInfo ~= nil then shaderName = buffInfo.shader_name end		if buffID ~= 0 then		g_start_buff_effect_listener(sprite, buffID, buffInfo.buff_type, buffInfo.duration, 									buffInfo.shader_name, buffInfo.modify_attribute, buffInfo.modify_value, "player")	endend