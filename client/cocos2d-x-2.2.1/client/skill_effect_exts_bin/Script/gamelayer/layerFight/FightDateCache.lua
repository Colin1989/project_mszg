FightDateCache = {}---   30个格子的数据表 与点击事件相关   --时时记录 地图  （先怎么做再优化）---	  staus 初始化格子状态 用于区分点击事件类型--	  hidden 隐藏精灵（格子背后的故事）--	  isMasked 是否被遮罩local function initDate()local initDate = {}	initDate = { 	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},			--1	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},			--6	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},			--11	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},			--16	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},			--21	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},			--26	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null, otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},	{staus = g_Const_Sprite.Type.gird,	hidden = g_Const_SpriteId.null,	otherDate ={},isMasked = true	},}return initDateendlocal curAllMapDateCacle = {}   -- 当前所有数据数据缓存local m_BeginPos = nillocal mRound = 0		--回合数 ：翻格子 攻击怪物 时 改数值+1local mOperation = 0	--回合数--操作数 ：翻格子 攻击怪物 时 改数值+1local mKillMonster = 0	--杀死怪物的数量local mPickup_items = {}--战斗中拾取的道具local m_BoxNumber = 0 --副本拾取的宝箱统计local m_GoldNumber = 0 --副本金币的宝石统计local m_awards = {}		--推塔拾取的宝石local m_awardsNumber = 0 --推塔拾取的宝石统计local mPushTowerDateCaChe = nil --后台返回数据local mCurId = 0		--当前副本IDlocal mRoundEveryLayer = 0	--推塔每层用的回合数local mIsBuyPushRound = 0	--是否购买过推塔local mPush_Gold = 0		--推塔经验的和钱的积累local mPush_Exp = 0local mPush_MaxFloor = 0	--推塔最高层local mPushLayer = 0 		--当前推塔层数function FightDateCache.setcurId(id)	mCurId = idend--统计奖励function FightDateCache.setcurReward(rwType,num)	if rwType == "baoshi" then		m_awardsNumber = m_awardsNumber + num	elseif rwType == "gold" then		m_GoldNumber = m_GoldNumber + num	elseif rwType == "baoxiang" then		m_BoxNumber = m_BoxNumber + num	endendfunction FightDateCache.setPushMaxFloor(maxfloor)	mPush_MaxFloor = maxfloorendfunction FightDateCache.setPushTowerDate(resp)	mPushTowerDateCaChe = resp	--resp.max_floor --最高层数endfunction FightDateCache.addPushTower(item_id,money,exp)	local function isNewItem(item_id)		for k,v in pairs(m_awards) do			if v.temp_id == item_id then				v.amount = v.amount + 1				return false			end		end		return true		end	if isNewItem(item_id) then 		local newItem = {}		newItem.temp_id = item_id		newItem.amount = 1		table.insert(m_awards,newItem)			end	mPush_Gold = mPush_Gold + money	mPush_Exp = mPush_Gold + expend--在战斗拾取道具function FightDateCache.getItemInGameScene(dropout_id)	table.insert(mPickup_items,dropout_id)	EventCenter_post("ED_COLLECT_ITEM", dropout_id)endfunction FightDateCache.getPickup_items()	return mPickup_itemsend--参数：CallBack 回调函数function FightDateCache.Handle_mNextRound(Handle_Render)	mRound = mRound + 1	mRoundEveryLayer = mRoundEveryLayer + 1	if CopyDateCache.GameType == game_type["push_tower"] then 		EventCenter_post("ED_UPDATE_FIGHT_SHOW",		FightDateCache.pushTower())	end	Handle_Render()endfunction Handle_mNextmOperation(CallBack)	mOperation = mOperation + 1endlocal function setMapdate(curMaps)	local Mapdate = {}	Mapdate.start = curMaps.start		--起点(number)	Mapdate.door  = curMaps.door		--终点(number)			Mapdate.monster = curMaps.monster	--怪物(table)	monster[1].monsterid  怪物ID dropout（掉落 对应物品ID ,0 代表没有掉东西）  pos 位置		Mapdate.trap = curMaps.trap			--陷阱(table)	trap[1].trapid 陷阱ID trap[2].pos 对应位置		Mapdate.barrier = curMaps.barrier	--障碍(table)	 value->对应位置	Mapdate.award = curMaps.award			--奖励时间  和 陷阱时间合并										Mapdate.scene = curMaps.scene		--场景ID 	Mapdate.enemy = curMaps.enemy		--敌人（竞技场专属）   --tb.pos 	tb.type 	tb.battle_prop = {}->	table.insert(curAllMapDateCacle,Mapdate)end-- 获取当前关卡长度FightDateCache.getCurFuBenLength = function()	return #curAllMapDateCacleend-- 获取主线副本数据 FightDateCache.common = function()	Date = {}	Date.curFBid = mCurId	Date.BoxNumber = m_BoxNumber	Date.GoldNumber = m_GoldNumber	return DateendFightDateCache.buyRound = function()	mIsBuyPushRound = mIsBuyPushRound + 1	mRound = mRound - 50end-- 获取推塔数据 FightDateCache.pushTower = function()	Date = {}	Date.LeftRound = PUSH_TOTAL_ROUND - mRound	Date.resp =  mPushTowerDateCaChe 	Date.awards = m_awards	Date.IsBuyPushRound = mIsBuyPushRound	Date.gold = mPush_Gold	Date.exp = mPush_Exp	Date.pushLayer = mPushLayer	Date.awardsNumber = m_awardsNumber	--Date.PushMaxFloor = mPush_MaxFloor	return DateendFightDateCache.getMapDateByLv  = function(index)	if(curAllMapDateCacle[index]) then		local curLvDate = {}		curLvDate = initDate()		local curGameMapsDate = curAllMapDateCacle[index]				-- enemy init 竞技场专属			for key,enemy in pairs(curGameMapsDate.enemy) do				cclog("enemy init 竞技场敌人位置",enemy.pos)			curLvDate[enemy.pos].hidden = g_Const_Sprite.Type.enemy			curLvDate[enemy.pos].otherDate.type = enemy.type			curLvDate[enemy.pos].otherDate.battle_prop = enemy.battle_prop	--敌人属性		end					-- monster init		for key,monster in pairs(curGameMapsDate.monster) do			curLvDate[monster.pos].hidden = g_Const_Sprite.Type.monster								curLvDate[monster.pos].otherDate.id = monster.monsterid			curLvDate[monster.pos].otherDate.dropout = monster.dropout	--掉落物品			print("创建怪物：ID和位置",monster.monsterid,monster.pos,"掉落：",monster.dropout)			if ModelMonster.isInitiativeMonster(monster.monsterid) then	-- 主动怪标记				curLvDate[monster.pos].otherDate.attack_type = 1			end			curLvDate[monster.pos].otherDate.relative_id = ModelMonster.isRelaMonster(monster.monsterid)		-- 缓存每个怪物的关联怪		end			-- trap init  奖励 和 陷阱 合并		for key,trap in pairs(curGameMapsDate.trap) do 			curLvDate[trap.pos].hidden = g_Const_Sprite.Type.trap			curLvDate[trap.pos].otherDate.id = trap.trapid			print("陷阱：ID和位置",trap.trapid,trap.pos)		end		for key,award in pairs(curGameMapsDate.award) do 			curLvDate[award.pos].hidden = g_Const_Sprite.Type.trap			curLvDate[award.pos].otherDate.id = award.awardid			print("奖励：ID和位置",award.awardid,award.pos)		end		-- barrier init  		--print("障碍类型",type(curGameMapsDate.barrier))		for key,barrierPos in pairs(curGameMapsDate.barrier) do			--print(key,"障碍位置：",barrierPos)			curLvDate[barrierPos].hidden = g_Const_Sprite.Type.barrier		end				-- start init 		m_BeginPos = curGameMapsDate.start		curLvDate[m_BeginPos].staus = g_Const_Sprite.Type.background				-- door init 		print("门的位置：",curGameMapsDate.door)		if curGameMapsDate.door ~= 0 then 			curLvDate[curGameMapsDate.door].hidden = g_Const_Sprite.Type.door		end				--if CopyDateCache.GameType ==  game_type["push_tower"] then --推塔模式 背景后台给		print("资源ID,curGameMapsDate.scene",curGameMapsDate.scene)		if curGameMapsDate.scene ~= 0 then			LayerCopyTips.setCurCopyRes_id(curGameMapsDate.scene)		end			return curLvDate	else 		print("该关卡 不存在")	endendlocal mMaxLife = 0--本关最大生命FightDateCache.getMaxLife = function()	return 	mMaxLifeendFightDateCache.getCurrBeginPos  = function()	if(m_BeginPos)	then		return m_BeginPos	end	print("初始化数据失败：起始位置固定为25,不可能发生")	return 25	end --游戏ID （不是副本ID）local mGame_id = 0 FightDateCache.getCurGameId = function()	return mGame_idend-- 当前副本IDFightDateCache.curFB_ID = 0-- 获取本关 详细信息function getCurFBDetail()	for k,v in pairs(LogicTable.getGameAllFB() ) do		if v.id == FightDateCache.curFB_ID then			return v		end	end	return print("未找到FB  该ID->为",FightDateCache.curFB_ID)end--清除地图缓存FightDateCache.clearCache = function(curTable)		while(#curAllMapDateCacle>0) do		table.remove(curAllMapDateCacle)	endend-- 游戏结算 game_result 1正常过关  2(死亡 , 回合数到)FightDateCache.HandleGameSettle = function(game_result)		if CopyDateCache.GameType == game_type["common"] then		local tb = req_game_settle ()		--print("游戏通关")		tb.result = 1		--- 1为正常过关		tb.gold = FightDateCache.common().GoldNumber		tb.game_id = FightDateCache.getCurGameId()		tb.life = ModelPlayer.getCurLife()		tb.maxlife = FightDateCache.getMaxLife()		tb.monsterkill = FightDateCache.getKillMonster()		--print("杀死怪物数量",tb.monsterkill)		tb.user_operations = {}--FightDateCache.getConductCheckTb()  校验先屏蔽		tb.pickup_items = FightDateCache.getPickup_items()		NetHelper.sendAndWait(tb, NetMsgType["msg_notify_game_settle"])			elseif CopyDateCache.GameType == game_type["push_tower"] then		print("SEND -> msg_notify_push_tower_map_settle")		local tb = req_push_tower_map_settle()		tb.game_id = FightDateCache.getCurGameId()		tb.result = game_result		tb.cost_round = mRoundEveryLayer		tb.life = ModelPlayer.getCurLife()		tb.pickup_items = {}		NetHelper.sendAndWait(tb, NetMsgType["msg_notify_push_tower_map_settle"])	elseif CopyDateCache.GameType == "jjc" then 				local tb = req_challenge_settle ()		tb.game_id = FightDateCache.getCurGameId()		tb.result = game_result			--1 挑战成功 2 ：挑战失败	--可以作弊哦		NetHelper.sendAndWait(tb, NetMsgType["msg_notify_challenge_settle"])	endend--- 校验数据--获取当前杀死怪物数量FightDateCache.getKillMonster = function()	return mKillMonsterend--杀死怪FightDateCache.KillMonster = function(id)		mKillMonster = mKillMonster + 1	EventCenter_post("ED_KILL_MONSTER", id)endlocal mConductCheckTable = {}--参数：ConductPosId（位置1~30） 行为类型：ConductType(number)，其他数据otherNeedDate--返回：校验行为表FightDateCache.ConductCheck = function(ConductPosId,ConductType,otherNeedDate)	 if(otherNeedDate == nil) then		otherNeedDate = 0	 end	--otherNeedDate 没用就传0	--ConductPosId 位置ID 没有数据就传0 （如过关，群攻技能,群伤道具）	--ConductType:	--1：翻开格子 	--2: 点击怪物	--3: 拾取道具	--4：释放技能 otherNeedDate 技能ID	--5：使用道具 otherNeedDate 道具ID	--6：过关	local finalDate = otherNeedDate*10000+ConductPosId*100 + ConductType	table.insert(mConductCheckTable,finalDate)endFightDateCache.getConductCheckTb = function()	return mConductCheckTableend--- 数据由服务器 获取数据 在 进入副本 --initMode:初始化模式 pushNext:推塔下一层 FightDateCache.initGameDate = function(gamemaps,game_id,initMode)	if initMode == "pushNext" then --推塔		FightDateCache.clearCache()		--mConductCheckTable = {}	--校验		--mPickup_items = {}			--mKillMonster = 0		--mRound = 0		--mOperation = 0		g_CurLevelIndex = 1 --当前关卡数		mRoundEveryLayer = 0		mPushLayer = mPushLayer + 1		--m_awards = {}		--ModelPlayer.initEnterFightArr()		--mMaxLife = ModelPlayer.life		--mGame_id = game_id	else		m_BoxNumber = 0 --副本拾取的宝石统计		m_GoldNumber = 0 --副本拾取的宝石统计		FightDateCache.clearCache()		mConductCheckTable = {}	--校验		mPickup_items = {}		mRoundEveryLayer = 0		mKillMonster = 0		mRound = 0		mOperation = 0		g_CurLevelIndex = 1 --当前关卡数		mPushLayer = 1		m_awards = {}		ModelPlayer.initEnterFightArr()		m_awardsNumber = 0		mIsBuyPushRound = 0		mMaxLife = ModelPlayer.life		mGame_id = game_id		GameSceneHandleFight.init()	end	for key ,value in pairs(gamemaps) do 		setMapdate(value)	end	end