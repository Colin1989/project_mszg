------------------------------------------------------------------------ 作者：shenl-- 日期：2013-12-27-- 描述：一切界面的基类（表）每个layer必须继承 LayerAbstract----------------------------------------------------------------------LayerAbstract = {}local mTargetName = nilLayerAbstract.Timer = falseLayerAbstract.init = function()	print("Please implementation function.init in you layer")endLayerAbstract.onLayerForResult = function()	print("Please implementation function.onLayerForResult in you layer")endLayerAbstract.onClick = function(weightName)	print("Please implementation function.onClick in you layer")endLayerAbstract.onItemClick = function(parentNode,pos)	print("Please implementation function.onClick in you layer")endLayerAbstract.update = function(dt)	print("Please implementation function.onClick in you layer")endLayerAbstract.destory = function()	print("Please implementation function.onClick in you layer")end-----继承 function LayerAbstract:extend(childLayer)    childLayer = childLayer or {}    setmetatable(childLayer, self)    self.__index = self;endlocal function onClickEvent(typeName,widget)		print(typeName)		local CurTopLayerName = UIManager.getTopLayerName()			if typeName == "releaseUp" then			print("CurTopLayerName:",CurTopLayerName)			UIManager_UItable[CurTopLayerName].tb.onClick(widget)		endend-- 更新需要时时监听的数据 一般用于倒计时 每隔0.5秒调用一次-- 用法：开启update tb.Timer = truelocal TimeInterval = 0UI_UPDATE_INTERVAL = 1.0function UILayerDateUpdate(dt)	TimeInterval = TimeInterval + dt	if TimeInterval > UI_UPDATE_INTERVAL then		for key,value in pairs(UIManager_UItable) do			if value.tb == nil then 				--print("ERROR:--------->",key)				return			end			if value.tb.Timer ~=nil and value.tb.Timer == true then				value.tb.update(TimeInterval)			end		end		TimeInterval = 0	endend-- 设置UIImageView function loadTextureByPlist_UIImageView(widget,constFileName)	tolua.cast(star1,"UIImageView") 	widget:loadTexture(constFileName,UI_TEX_TYPE_PLIST);end---注册 weight事件function setOnClickListenner(weightName)	local weight = UIManager.getRunLayer():getWidgetByName(weightName)	weight:registerEventScript(onClickEvent)end-- 将数据和listView控件绑定-- 参数：scrollView 父节点  --		 ArrayDate 数据表 type（table）key 1,2,3..value :widget--   	 style "V" 代表竖方向滑动 style "H" 横向滑动--		 this,type(table) 当前界面表-- 用这个方法必须 继承 LayerAbstract  并且 实现 this.onItemClickfunction setListViewAdapter(this,scrollView,ArrayDate,style)  --横的要再优化情况不够的状态		local DateLength = #ArrayDate	local ScrollSizeHeight = scrollView:getSize().height --可视范围	local ScrollSizeWidth  = scrollView:getSize().width		--print("~~~~~~~~~~~~~~~~~~~~~~~~~",scrollView:getSize().height)		local widgetWidth = 0;widgetHeight = 0	for key,widget in pairs(ArrayDate) do 		local widget_height = widget:getSize().height		local widget_width  = widget:getSize().width	--print("###################ScrollSizeHeight - widget_height*DateLength = ",ScrollSizeHeight - widget_height*DateLength)			--print("~~~~~~~~~~~~GG~~~~~~~~~~~~~",widget:getSize().height*4)			local delta_H_anc = 0		local delta_W_anc = 0		if style =="V" then		--竖的			--自动往上拉			if ScrollSizeHeight - widget_height*DateLength > 0 then				local deltaH = ScrollSizeHeight - widget_height*DateLength				delta_H_anc = deltaH/widget_height			end			-- 居中			if widget_width - ScrollSizeWidth < 0 then				local deltaW = (ScrollSizeWidth - widget_width)/2					delta_W_anc = deltaW/widget_width			end			widgetHeight  = widgetHeight + widget:getSize().height			widget:setAnchorPoint(ccp(0 - delta_W_anc,(-1)*(key -1 + delta_H_anc)))			widget:setTag(DateLength - key)		elseif style =="H" then  --横的			widgetWidth  = widgetWidth + widget:getSize().width			widget:setAnchorPoint(ccp((-1)*(key -1),0))			widget:setTag(key-1)		end		--widget:setTouchEnabled(true)		widget:registerEventScript(function (EventType,widge)			if EventType == "releaseUp" then				this.onItemClick(scrollView,widget:getTag())			end		end)		scrollView:addChild(widget)	end		if style =="V" then			scrollView:setDirection(SCROLLVIEW_DIR_VERTICAL)		scrollView:setInnerContainerSize(CCSizeMake(scrollView:getSize().width,widgetHeight));	elseif style == "H" then 		scrollView:setDirection(SCROLLVIEW_DIR_HORIZONTAL)		scrollView:setInnerContainerSize(CCSizeMake(widgetWidth,scrollView:getSize().height));	endendfunction setButtonListenner(widgetTb,rootView,Handle_func)	local function handle_onClick(typeName,widget) 		if typeName == "releaseUp" then			for key,value in pairs(widgetTb) do	--取消原来两的东西				if value.isBright == true then 					local Sprite = value.widget:getVirtualRenderer()					tolua.cast(Sprite,"CCSprite")					Proxy:spriteHighlight(Sprite,false)						Handle_func(widget)				end 			end			value.isBright = true			local Sprite = widget:getVirtualRenderer()			tolua.cast(Sprite,"CCSprite")			Proxy:spriteHighlight(Sprite,true)				Handle_func(widget)		end	end	for key,value in pairs(widgetTb) do		if value.isBright == true then 			local Sprite = value.widget:getVirtualRenderer()			tolua.cast(Sprite,"CCSprite")			Proxy:spriteHighlight(Sprite,false)				Handle_func(widget)		end 		local Btn =  rootView:getWidgetByName(value.widget:getName())		weight:registerEventScript(handle_onClick)	endend--注意要释放local mJosnCaCheTb = {}-- josn Cachefunction LoadWidgetFromJsonFile(JosnFile)	local isLoaded = false 		for key,value in pairs(mJosnCaCheTb) do		--print("Key-----Json--------->", key ,type(key))		if key == JosnFile then 			isLoaded = true		end	end	local widget = nil	if isLoaded == false then		local newWidget = GUIReader:shareReader():widgetFromJsonFile(JosnFile)		mJosnCaCheTb[JosnFile] = newWidget		cclog("new JSON  ->",JosnFile)	 end	widget = mJosnCaCheTb[JosnFile]:clone()	mJosnCaCheTb[JosnFile]:retain()		return widgetend