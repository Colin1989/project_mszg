---------------------------------------------------	文件内容：	UI界面管理--	叶江涛		2013/11/21	--  shengl		修改		----------------------------------------------------FIXME setZOrder  这个机制要再优化UIManager = {}---	界面常量注册表 	------------------	tag: 界面ID		------------------	jsonFile:资源文件名	-----------  --- tb 对应的lua表 ------------------- status: layer状态 "onSleep"(未启动),"onStart"(运行中),"onPause(暂停)","onDead"(死亡)-------------UIManager_UItable = {	["UI_Login"] = {				--登入界面		tag = 900,		jsonFile = "DemoLogin.json",		status = "onSleep",		focus = true,		tb = LayerLogin	},	["UI_ComfigDialog"] = {		tag = 921,		jsonFile = "sysmsg_2_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayoutComfigDialog	},	["UI_RollChoice"] = {			--角色选择界面		tag = 924,		jsonFile = "herochoosenew_1.ExportJson",--		status = "onSleep",		focus = true,		tb = LayerRoleChoice	},	["UI_Main"] = {					--游戏主界面		tag = 925,		--jsonFile = "mainui_1.ExportJson",  替换		jsonFile = "mainUINew1_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerMain	},	["UI_Hero"] = {					--英雄界面		tag = 926,		jsonFile = "heroui_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerHero		},			["UI_ComfirmDialog"] = {			--确认对话框		tag = 928,		--jsonFile = "sysmsg_2_1.json",		jsonFile = "sysmsg_2_1.ExportJson",		focus = true,		status = "onSleep",		tb = LayerConfirmDialog	},--[[	["UI_Backpack"] = {					--背包界面		tag = 930,			jsonFile = "Backpack_Bag.ExportJson",		tb = LayerBackpack		},	["UI_EquipDetails"] = {				--背包->装备详情页面		tag = 931,			jsonFile = "Backpack_Base.ExportJson",		tb = LayerEquipDetails		},--]]    ["UI_FightOver"] = {			--战斗结算界面		tag = 932,		jsonFile = "fightOver_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerFightOver	},    ["UI_FightReward"] = {			--战斗奖励界面		tag = 933,		jsonFile = "FightReward_1.ExportJson",		status = "onSleep",		tb = LayerFightReward	},    ["UI_CopyTips"] = {			--副本详细信息界面		tag = 934,		jsonFile = "copyIntroduction_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerCopyTips	},	["UI_TempPack"] = {			--临时背包界面		tag = 935,		jsonFile = "Backpack_Temp.ExportJson",		status = "onSleep",		tb = LayerTempBackpack	},        ["UI_FightFailed"] = {			--战斗失败界面		tag = 936,		jsonFile = "FightFailed_1.ExportJson",    --json有待修改		status = "onSleep",		focus = true,		tb = LayerFightFailed	},	["UI_Sell"] = {			--售出		tag = 937,		jsonFile = "CommonLayer_sale.ExportJson",    --json有待修改		status = "onSleep",		focus = true,		tb = LayerSell	},    ["UI_TowerSettle"] = {			--推塔结算界面		tag = 946,		jsonFile = "TowerSettle_1.ExportJson",    --json有待修改		status = "onSleep",		focus = true,		tb = LayerTowerSettle	},    ["UI_FriendInfo"] = {			--好友操作界面		tag = 948,		jsonFile = "friendInfo_1.ExportJson",    --json有待修改		status = "onSleep",		focus = true,		tb = FriendInfo	},     ["UI_FriendChat"] = {			--好友聊天界面		tag = 949,		jsonFile = "FriendChat_1.ExportJson",    --json有待修改		status = "onSleep",		focus = true,		tb = FriendChat	},	["UI_Assistance"] = {			-- 援助		tag = 950,		jsonFile = "Assistance_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerAssistance	},	["UI_JJCFailed"] = {			-- 竞技场挑战失败		tag = 951,		jsonFile = "JJcFail_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerJJcFail	},	["UI_JJCSuccess"] = {			-- 竞技场挑战成功		tag = 952,		jsonFile = "JJcSuccess_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerJJcSuccess 	},	["UI_LvUp"] = {			-- 玩家升级		tag = 953,		jsonFile = "levelUp_1.ExportJson",		status = "onSleep",		focus = true,		tb = LayerLvUp	}}--------taggetName : UItable Index type:string--- 界面跟节点堆栈local LayerStack = {}-- 界面数据缓存local LayerDateCache = {}-- 获取当前UI层级  UIManager.UILayerNumber = function(targetName)	return #LayerStackend---------界面注册--------------local UIManager_register = function(targetName)	local LayerRoot = UILayer:create()	LayerRoot:setTag(UIManager_UItable[targetName].tag)	LayerRoot:setZOrder (0)	g_uiRoot:addChild(LayerRoot)end------- 界面跟节点获取---------UIManager.findLayerByTag = function(targetName)	local layerRoot = g_uiRoot:getChildByTag(UIManager_UItable[targetName].tag)	tolua.cast(layerRoot,"UILayer")	return layerRootend-----功能：界面创建--------------------参数：1,targetNameTb(type:table)UIManager.Create = function(targetName,bundle)	local targetNameTb = UIManager_UItable[targetName].tb	UIManager_UItable[targetName].status = "onStart"	local rootlayer = UIManager.findLayerByTag(targetName)	 --跟节点是否存在？	if(rootlayer) then 		rootlayer:setVisible(true)		print("该UI第二次 快速创建")  --FIXME 这里要改		rootlayer:setTouchEnabled(true)	else		print("----",targetName,"--CREATE UI")		UIManager_register(targetName)			rootlayer = UIManager.findLayerByTag(targetName)		print("targetName:",targetName,UIManager_UItable[targetName].jsonFile)		rootlayer:addWidget(GUIReader:shareReader():widgetFromJsonFile(UIManager_UItable[targetName].jsonFile))		--rootlayer:addWidget( LoadWidgetFromJsonFile(UIManager_UItable[targetName].jsonFile) )	end		table.insert(LayerStack,rootlayer) -- 直接存根节点 会不会出问题？	print("#push------->LayerStack",#LayerStack)	--rootlayer:setZOrder (#LayerStack)	targetNameTb.init(bundle)	return rootlayerend--- 界面出栈UIManager.pop = function(destroyName)	if UIManager_UItable[destroyName] then		UIManager.destroy(destroyName)	else		LayerStack[#LayerStack]:setVisible(false)		table.remove(LayerStack)	end		if(#LayerStack > 0) then 		LayerStack[#LayerStack]:setTouchEnabled(true)	endend------- 界面(彻底销毁)销毁---------------UIManager.destroy = function(targetName)	g_uiRoot:removeChildByTag(UIManager_UItable[targetName].tag,true)		if(UIManager_UItable[targetName].tb.Timer) then			UIManager_UItable[targetName].tb.Timer = false		end	UIManager_UItable[targetName].tb.destory()	UIManager_UItable[targetName].status = "OnDead"	table.remove(LayerStack)end------- 销毁所有UI界面---------------UIManager.destroyAllUI = function()	for key,value in pairs(LayerStack) do		g_uiRoot:removeChild(value,true)	end	for k,v in pairs(UIManager_UItable) do			v.status = "onDead" 		if(v.tb.Timer) then	--清除定时器			v.tb.Timer = false		end	end	while (#LayerStack > 0) do		print("#LayerStack",#LayerStack)		table.remove(LayerStack)	endend------- 界面推入 保存原来界面	bundle 需要传递的参数  可以不传UIManager.push = function(targetName,bundle)	if LayerStack[#LayerStack] then 		if UIManager_UItable[targetName].focus == true then			LayerStack[#LayerStack]:setTouchEnabled(false)		end	end	UIManager.Create(targetName,bundle)end--------- 获取顶层layer -----------UIManager.getRunLayer = function()	return LayerStack[#LayerStack]end---------  获取栈顶 UI_targetNameUIManager.getTopLayerName = function()	local TopLayer = LayerStack[#LayerStack]	if(TopLayer) then 		local tag = TopLayer:getTag()		for key,value in pairs(UIManager_UItable) do			if tag == value.tag then 				return key			end		end	else 		print("UI_Layer is not exsit")	endendfunction UIManager_PlayActionByName( strJsonFileName , strActionName )	ActionManager:shareManager():playActionByName( strJsonFileName , strActionName )end--- 返回主界面UIManager.retrunMainLayer = function(EventTpye)	print("回主界面")	ModelPlayer.life = FightDateCache.getMaxLife()	UIManager.destroyAllUI()	g_sceneRoot:removeAllChildrenWithCleanup(true)			g_sceneUIRoot:setVisible(false)			UIManager.push("UI_Main",EventTpye)	EventCenter_post(EventDef["ED_UPDATE_ROLE_INFO"], ModelPlayer) end----- 函数 ：下一个layer 要传参数给上一个layer 事件UIManager.startLayerForResult = function(targetName,requireCode)		UIManager.push(targetName)	LayerDateCache[targetName] = requireCodeendUIManager.setResult = function(targetName,resultCode)	local requireCode = LayerDateCache[targetName]	targetNameTb.onLayerForResult(requireCode,resultCode)end--[[	local tb = {}		tb.targetName = "UI_LvUp"		tb.param = {}		tb.param.lastNum = ModelPlayer.level		tb.param.curNum = newLv]]----主动弹框管理 local mBouncedWindowCaChe = {}--弹出缓存里面的一个界面UIManager.BounceTop =function ()	if #mBouncedWindowCaChe > 0 then 		local tb = mBouncedWindowCaChe[1]		UIManager.push(tb.targetName,tb.param)		table.remove(mBouncedWindowCaChe,1)	endendUIManager.BounceWindows = function (target)	for key,value in pairs(mBouncedWindowCaChe) do		if value.targetName == target then 			UIManager.push(value.targetName,value.param)			table.remove(mBouncedWindowCaChe,key)			return		end	end end  -- 添加弹框界面缓存UIManager.addBouncedWindowCaChe = function(target)	table.insert(mBouncedWindowCaChe,target)end