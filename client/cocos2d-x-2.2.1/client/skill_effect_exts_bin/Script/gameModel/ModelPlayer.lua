------------------------------------------------------------------------ 作者：shenl-- 日期：2013-12-16-- 描述：玩家属性建模----------------------------------------------------------------------local curRanNum				--临时随机数POWER_UP_MAX = 250	--体力最大值math.randomseed(os.time()) local mPlayerUpdate = XmlTable_load("role_upgrad_tplt.xml") local mRoleInitDate = XmlTable_load("role_tplt.xml") local mPlayerRenderNode = nil	-- 玩家渲染节点ModelPlayer = {}--装备栏 表ModelPlayer.UserEquipTable = {}AttrSecretTable = { 	md5key = "",	md5Value = ""}------- 加密  每次重要数据被改动时候 都要重新加密local function Encryption()	curRanNum = math.random(1,10000)	AttrSecretTable.md5key		= string.format("%d",curRanNum)	AttrSecretTable.md5Value	= Proxy:GetMD5OfString(string.format("%d%d%d",curRanNum,ModelPlayer.attack,ModelPlayer.speed))end-------- 解密 每次获取重要数据的时候都要 解密local function deEncryption()	local curMd5Value = Proxy:GetMD5OfString(string.format("%d%d%d",AttrSecretTable.md5key,ModelPlayer.attack,ModelPlayer.speed))	if curMd5Value == AttrSecretTable.md5Value  then		return true	end	--assert(false,"尼玛!改数据");	return falseend--属性相加local function AttrAdding(attr_1,attr_2)	attr_1.life = attr_1.life or 0	attr_1.atk = attr_1.atk or 0	attr_1.speed = attr_1.speed or 0	attr_1.hit_ratio = attr_1.hit_ratio or 0	attr_1.critical_ratio = attr_1.critical_ratio or 0	attr_1.miss_ratio = attr_1.miss_ratio or 0	attr_1.tenacity = attr_1.tenacity or 0		attr_2.life = attr_2.life or 0	attr_2.atk = attr_2.atk or 0	attr_2.speed = attr_2.speed or 0	attr_2.hit_ratio = attr_2.hit_ratio or 0	attr_2.critical_ratio = attr_2.critical_ratio or 0	attr_2.miss_ratio = attr_2.miss_ratio or 0	attr_2.tenacity = attr_2.tenacity or 0		attr_1.life			= attr_1.life + attr_2.life	attr_1.atk			= attr_1.atk + attr_2.atk	attr_1.speed		= attr_1.speed + attr_2.speed	attr_1.hit_ratio 	= attr_1.hit_ratio + attr_2.hit_ratio	attr_1.critical_ratio = attr_1.critical_ratio + attr_2.critical_ratio	attr_1.miss_ratio	= attr_1.miss_ratio + attr_2.miss_ratio	attr_1.tenacity		= attr_1.tenacity + attr_2.tenacity		return attr_1end--获得加成后的玩家总属性ModelPlayer.getPlayerAllAttr = function()	local attr = {}	local role_tplt = ModelPlayer.getRoleInitDetailMessageById( ModelPlayer.roletype)	attr.fly_effect_id = role_tplt.fly_effect_id	attr.front_effect_id = role_tplt.front_effect_id	attr.back_effect_id = role_tplt.back_effect_id	attr.icon = role_tplt.icon	attr.restoreIcon = role_tplt.icon	--基础属性	local baseAttr = ModelPlayer.getPlayerInitDateByTypeAndLv(ModelPlayer.roletype,ModelPlayer.level)	attr = AttrAdding(attr,baseAttr)	--装备属性	local Equip = {} 	--宝石加成属性	local gemAttr = {} 		for key,val in pairs(ModelPlayer.UserEquipTable) do		local id = ModelPlayer.UserEquipTable[key]		local EquipChild = ModelPlayer.getPackItemArr(id)				if EquipChild ~= nil then			Equip = AttrAdding(Equip,EquipChild)		end				local GemTable = ModelEquip.getEquipRandomAttr(id).gems		for gem_k,gem_id in pairs(GemTable) do			local GemChild = ModelGem.getGemAttr(gem_id)			gemAttr = AttrAdding(gemAttr,GemChild)		end			end	attr = AttrAdding(attr,Equip)	attr = AttrAdding(attr,gemAttr)			--强化加成属性				--结算	return attrend--获取技能加成 后的属性--参数：BonusType 加成类型;bonusNum 加成数值 bonusNum ModelPlayer.getSkillBonus =function(BonusType,bonusNum)	local AttrTb =  CommonFunc_table_copy_table( ModelPlayer.getPlayerAllAttr() )	if type(BonusType) == "string" then 		AttrTb[BonusType] = v[BonusType] + bonusNum -- 加成计算 按需求改		return AttrTb	end	if type(BonusType) == "table" then 		for k,bonus_Num in pairs(bonusNum) do			AttrTb[k] = bonus_Num + AttrTb[k]	-- 加成计算 按需求改		end		return AttrTb	end	print("传入参数有误类型")	return nilend-- 通过 "职业"和"等级"查询玩家的所有"基础属性"查询ModelPlayer.getPlayerInitDateByTypeAndLv= function(roletype,level)	local _id = tonumber(roletype)*1000 + tonumber(level)	local PlayerinitDate = XmlTable_getRow(mPlayerUpdate,"id",tostring(_id) )		local player = {}	for k, v in pairs(PlayerinitDate) do		if "id" == v.name then			player.id = v.value			elseif "name" == v.name then			player.name = v.value		--elseif "roletype" ==	v.name then			--player.roletype = v.value + 0		--elseif "level" == v.name then			--player.level = v.value + 0			elseif "life" == v.name then			player.life = v.value  + 0						elseif "atk" == v.name then			player.atk = v.value + 0				elseif "speed" == v.name then			player.speed = v.value + 0			elseif "hit_ratio" == v.name then		 --命中			player.hit_ratio = v.value  + 0						 		elseif "critical_ratio" == v.name then	 --暴击			player.critical_ratio = v.value  + 90				elseif "miss_ratio" == v.name then		 --闪避			player.miss_ratio = v.value  + 0			elseif "tenacity" == v.name then		 --韧性			player.tenacity = v.value  + 0				end	end	return playerend-- 获取角色初始化数据查询ModelPlayer.getRoleInitDetailMessageById = function(id)	print("获取角色初始化数据查询:",id)	local PlayerinitDate = XmlTable_getRow(mRoleInitDate,"id",id)		local initDate = {}	for k, v in pairs(PlayerinitDate) do		if "id" == v.name then			initDate.id = v.value			elseif "skill1" == v.name then			initDate.skill1 = v.value		elseif "skill2" == v.name then			initDate.skill2 = v.value		elseif "describe" == v.name then			initDate.describe = v.value		elseif "icon" == v.name then			initDate.icon = v.value		elseif "heroicon" == v.name then 			initDate.heroicon = v.value		elseif "fly_effect_id" == v.name then			initDate.fly_effect_id = v.value + 0		elseif "front_effect_id" == v.name then			initDate.front_effect_id = v.value + 0		elseif "back_effect_id" == v.name then			initDate.back_effect_id = v.value + 0		end	end	return initDateendmBasePlayerArr = nil 		--基础属性mPlayerWeapanArr = nil 	--武器属性mPlayerArmorArr = nil		--护甲属性mPlayerMedalArr = nil 	--奖章属性mPlayerJewelryArr = nil 	--饰品属性mPlayerNecklaceArr = nilmPlayerRingArr = nil-- 刷新玩家属性local function refreshPlayerArr()		mBasePlayerArr = ModelPlayer.getPlayerInitDateByTypeAndLv(ModelPlayer.roletype,ModelPlayer.level)	-- 获取玩家基础属性	mPlayerWeapanArr = ModelPlayer.getPackItemArr(ModelPlayer.weapon)							 -- 获取玩家武器属性	mPlayerArmorArr = ModelPlayer.getPackItemArr(ModelPlayer.armor)								 -- 获取玩家护甲属性	mPlayerMedalArr = ModelPlayer.getPackItemArr(ModelPlayer.medal)								 -- 获取玩家奖章属性	mPlayerJewelryArr = ModelPlayer.getPackItemArr(ModelPlayer.jewelry)		mPlayerNecklaceArr = ModelPlayer.getPackItemArr(ModelPlayer.necklace)	mPlayerRingArr = ModelPlayer.getPackItemArr(ModelPlayer.ring)	end-- 升级要调用升级动画function ModelUpdateLv(newLv)	if ModelPlayer.level~=nil and newLv > ModelPlayer.level then 		local tb = {}		tb.targetName = "UI_LvUp"		tb.param = {}		tb.param.lastNum = ModelPlayer.level		tb.param.curNum = newLv				UIManager.addBouncedWindowCaChe(tb)	--升级了要弹框	end 	ModelPlayer.level = newLvend-- 玩家属性 初始化ModelPlayer.initArr = function(tb)	print("玩家属性 初始化")	--接收 服务端 消息	ModelPlayer.id = tb.id	ModelPlayer.nickname =  tb.nickname    ModelPlayer.roletype = tb.roletype + 0	print("ModelPlayer.roletype:",ModelPlayer.roletype)    ModelPlayer.armor = tb.armor    ModelPlayer.weapon = tb.weapon    ModelPlayer.medal = tb.medal     ModelPlayer.jewelry = tb.jewelry	ModelPlayer.ring = tb.ring    ModelPlayer.necklace = tb.necklace	ModelPlayer.skill = {}	ModelPlayer.skill[1] = tb.skill1	ModelPlayer.skill[2] = tb.skill2	ModelPlayer.sculpture = {}    ModelPlayer.sculpture[1] = tb.sculpture1    ModelPlayer.sculpture[2] = tb.sculpture2    ModelPlayer.sculpture[3] = tb.sculpture3    ModelPlayer.sculpture[4] = tb.sculpture4	ModelPlayer.friend_point = tb.friend_point + 0	LayerRuneGamble.divine_level[1] = tb.divine_level1	LayerRuneGamble.divine_level[2] = tb.divine_level2	LayerRuneGamble.divine_level[3] = tb.divine_level3	    --ModelPlayer.level	ModelUpdateLv(tb.level + 0)	ModelPlayer.exp  = tb.exp	ModelPlayer.gold = tb.gold	ModelPlayer.emoney = tb.emoney	ModelPlayer.power_hp = tb.power_hp			--体力	ModelPlayer.recover_time_left = tb.recover_time_left	ModelPlayer.power_hp_buy_times = tb.power_hp_buy_times	-- 当日可购买次数	ModelPlayer.pack_space = tb.pack_space				ModelPlayer.UserEquipTable[equipment_type["weapon"]]=	tb.weapon	ModelPlayer.UserEquipTable[equipment_type["armor"]]= tb.armor	ModelPlayer.UserEquipTable[equipment_type["necklace"]]= tb.necklace	ModelPlayer.UserEquipTable[equipment_type["ring"]]= tb.ring	ModelPlayer.UserEquipTable[equipment_type["jewelry"]] = tb.jewelry	ModelPlayer.UserEquipTable[equipment_type["medal"]] = tb.medal			-- 获取玩家基础属性	mBasePlayerArr = ModelPlayer.getPlayerInitDateByTypeAndLv(ModelPlayer.roletype,ModelPlayer.level)	-- 获取装备属性	mPlayerWeapanArr = ModelPlayer.getPackItemArr(ModelPlayer.weapon)							 -- 获取玩家武器属性	--print(" mPlayerWeapanArr!!!!!!!!!!!!!!!!", mPlayerWeapanArr.atk )	--string.print_int64("ModelPlayer.weapon     ",ModelPlayer.weapon)	mPlayerArmorArr = ModelPlayer.getPackItemArr(ModelPlayer.armor)								 -- 获取玩家护甲属性	mPlayerMedalArr = ModelPlayer.getPackItemArr(ModelPlayer.medal)								 -- 获取玩家奖章属性	mPlayerJewelryArr = ModelPlayer.getPackItemArr(ModelPlayer.jewelry)							 -- 获取玩家饰品属性--[[	for key,value in pairs ( ModelPlayer.getPlayerAllAttr() ) do		print("key-->",key,"--value-->",value )	end--]]	--ModelPlayer.atk = 1	ModelPlayer.initEnterFightArr()	--if(UIManager_UItable["UI_Main"].status == "onStart") then	EventCenter_post(EventDef["ED_UPDATE_ROLE_INFO"], ModelPlayer) -- 初始化主界面用户数据	end-- 获取玩家 通过装备得到的属性 name:要获取的属性名称ModelPlayer.getPlayerEquipArr = function(arrName) 	local finalValue = 0 	if(mPlayerWeapanArr) then 		finalValue  = finalValue + mPlayerWeapanArr[arrName]	elseif(mPlayerArmorArr) then 		finalValue  = finalValue + mPlayerArmorArr[arrName]	elseif(mPlayerMedalArr) then		finalValue  = finalValue + mPlayerMedalArr[arrName]	elseif(mPlayerJewelryArr) then		finalValue  = finalValue + mPlayerJewelryArr[arrName]	end	--print("你的 ModelPlayer.getPlayerEquipArr的参数arrName 传错了！！")		return finalValueend---  初始化当前属性ModelPlayer.initEnterFightArr = function()--[[	ModelPlayer.life = ModelPlayer.getPlayerAllAttr().life	ModelPlayer.atk = ModelPlayer.getPlayerAllAttr().atk	ModelPlayer.speed = ModelPlayer.getPlayerAllAttr().speed	ModelPlayer.hit_ratio = ModelPlayer.getPlayerAllAttr().hit_ratio	ModelPlayer.critical_ratio = ModelPlayer.getPlayerAllAttr().critical_ratio	ModelPlayer.miss_ratio = ModelPlayer.getPlayerAllAttr().miss_ratio	ModelPlayer.tenacity = ModelPlayer.getPlayerAllAttr().tenacity--]]	for k,v in pairs (ModelPlayer.getPlayerAllAttr()) do		ModelPlayer[k] = v	end	end--获取玩家背包道具基础属性ModelPlayer.getPackItemBaseArr = function(id) 	local itemid = ModelPlayer.findBagItemIdById(id)	if itemid == nil then		--string.print_int64("背包内没有该物品ID:",id)		 --在背包中搜索找不到物品的话,在装备表中搜索		itemid = ModelEquip.findEquipItemIdById(id)		if itemid == nil then 			--print("装备表中搜索不到该物品")			return		end	end	local itemArr = LogicTable.getItemById(itemid)			return itemArrend -- 获取玩家背包道具详细属性属性ModelPlayer.getPackItemArr = function(id) 	local item =  ModelPlayer.getPackItemBaseArr(id)	if item == nil then		return	end	local itemType = item.type + 0	--1-装备 2-符文 3-宝石 4-道具	if itemType == item_type["equipment"] then		--print("装备")		local equip = ModelEquip.getEquipById(item.sub_id,id)		--equip.name = string.format("%s%s+%d",randomAttr.name,item.name,randomAttr.strengthen_level) 		--equip.name = string.format(equip.name,item.name)		return equip ,item	elseif itemType == item_type["sculpture"] then		print("符文")		local runeAttr = ModelRune.getRune_tplt(item.sub_id)		return runeAttr,item	elseif itemType == item_type["gem"] then		print("宝石")		local gemAttr = ModelGem.getGemAttr(item.sub_id)		return gemAttr,item	end	returnend-- 更新体力值ModelPlayer.updatePowerUp = function(dt)	local playerPowerUp = nil   if ModelPlayer.power_hp ~= nil 	then					if (ModelPlayer.power_hp < POWER_UP_MAX) then			ModelPlayer.recover_time_left = ModelPlayer.recover_time_left - dt			if(ModelPlayer.recover_time_left <= 0 ) then				ModelPlayer.recover_time_left = 300   --300秒回复一点体力				ModelPlayer.power_hp = ModelPlayer.power_hp+1				playerPowerUp = ModelPlayer.power_hp			end			return CommonFunc_secToString(ModelPlayer.recover_time_left),playerPowerUp		else			return "full" 		end	endendModelPlayer.bag = {}-- 玩家背包初始化ModelPlayer.initPack =  function(tb)		if tb.type == data_type["init"] then 		--[[for key,item in pairs(tb.pack_items) do			table.insert(ModelPlayer.bag,item)			end]]		print("tb.type == data_type[init")		LayerBackpack.initTableItem(tb.pack_items)	elseif tb.type == data_type["append"] then 		print("tb.type == data_type[append")		LayerBackpack.appendTableItem(tb.pack_items)			elseif tb.type == data_type["delete"] then		print("tb.type == data_type[delete")		LayerBackpack.deleteTableItem(tb.pack_items)	elseif tb.type == data_type["modify"] then		print("tb.type == data_type[modify")		LayerBackpack.modifyTableItem(tb.pack_items)			end		--临时这么写	ModelPlayer.bag = LayerBackpack.getTableItemAll()		--[[	print("临时背包测试")	for key,val in pairs(ModelPlayer.bag) do 		string.print_int64("ModelPlayer.bag key:",val.id)	end	print("END临时背包测试")	]]		--刷新背包数据 如果不在当前界面的话会出错	LayerBackpack.setScrollViewData()end--玩家道具 映射到 背包属性ModelPlayer.findBagItemAttr = function(id)	for key,item in pairs(ModelPlayer.bag) do		if item.id == id	then			return item		end	end	return nilend-- 玩家道具 映射到 物品IDModelPlayer.findBagItemIdById = function(id)	---pack_items 格式	--   tb.id = 0	--   tb.itemid = 0	--   tb.itemtype = 0	--   tb.amount = 0		for key,val in pairs(ModelPlayer.bag) do		if val.id == id	then			return val.itemid		end	end	return nilend--itemid 物品ID  返回该背包属性（相同物品数量已相加）ModelPlayer.findBagByItemid = function(itemid)	local tb = nil		for key,val in pairs(ModelPlayer.bag) do		if val.itemid == itemid	then						if tb == nil then				tb = val			else				tb.amount = tb.amount + val.amount			end					end	end		return tb	end-- 玩家绘制 ModelPlayer.initRender = function()	--local playerArr = getMonsterDefineAttrById(1)	local role_tplt = ModelPlayer.getRoleInitDetailMessageById( ModelPlayer.roletype)	--print("role_tplt.icon",role_tplt.icon)	local role_Ani = ResourceManger.getAnimationFrameById(role_tplt.icon )	mPlayerRenderNode = CCSprite:create()	mPlayerRenderNode:setPosition(ccp(100,130))	g_sceneUIRoot:addChild(mPlayerRenderNode,g_Const_GameLayer.uiLayerPlayer)	--local str = string.format("monster%d_%s",1,"wait").."_%03d.png"	local str = string.format("%s_%s",role_Ani.name,role_Ani.wait).."_%03d.png"	print("Player--------------------------------------------->",str)	local animation = createAnimation(str,role_Ani.wait_frame,0.1)	mPlayerRenderNode:runAction(CCRepeatForever:create(CCAnimate:create(animation))) endlocal frame_speed = 1.0 / 24.0-- 玩家攻击ModelPlayer.atkRender = function(icon, callback_playerAttacked)	switchActionToAttack(mPlayerRenderNode,icon,callback_playerAttacked)end-- 玩家技能攻击ModelPlayer.skillAtkRender = function(icon, effectFrameIdx, callback_EffectFrame, callback_ActionDone)	local node = mPlayerRenderNode	local resid = icon		local role_Ani = ResourceManger.getAnimationFrameById(resid)	local str = string.format("%s_%s",role_Ani.name,role_Ani.attack).."_%03d.png"	tolua.cast(node,"CCSprite")	node:stopAllActions()	local animation = createAnimation(str,role_Ani.attack_frame, frame_speed)	local action = CCSequence:createWithTwoActions(CCAnimate:create(animation),CCCallFuncN:create(callback_ActionDone))		node:runAction(action)		node:runAction(CCSequence:createWithTwoActions(CCDelayTime:create(effectFrameIdx * frame_speed), CCCallFuncN:create(callback_EffectFrame)))end--玩家受到击ModelPlayer.hitedRender = function(icon, callback_playerHited)	switchActionToHited(mPlayerRenderNode,icon,callback_playerHited)endModelPlayer.waitRender = function(icon)	switchActionToWait(mPlayerRenderNode,icon)endModelPlayer.getId = function()	return ModelPlayer.idend--- 获取玩家渲染节点ModelPlayer.getPlayerNode =function()	return mPlayerRenderNodeend --获取玩家的名字ModelPlayer.getNickName = function ()    return ModelPlayer.nicknameendModelPlayer.getLv = function()	return ModelPlayer.levelend--[[ModelPlayer.setLife = function(dp)	ModelPlayer.life = ModelPlayer.life - dp	GameUiLayer.refreshPlayerLefe(ModelPlayer.life)end]]--function ModelPlayer.refreshPlayerArrViewInFightLayer(playerArr)	GameUiLayer.refreshPlayerStatus(playerArr.atk, playerArr.life, playerArr.speed)end-- 获取当前生命ModelPlayer.getCurLife = function()	return ModelPlayer.lifeendModelPlayer.getPower_hp = function()	-- 获取玩家体力	return ModelPlayer.power_hpend			local function Handle_roleinfo_msg(tb)	ModelPlayer.initArr(tb)	print("请求副本详细信息")		local tb = req_last_copy()      -- 请求解锁副本的消息    tb.roleid = ModelPlayer.getId()    NetHelper.sendAndWait(tb, NetMsgType["msg_notify_last_copy"])endlocal function Handle_player_pack_msg(resp)	ModelPlayer.initPack(resp)endlocal function Handle_update(resp)	if resp.getMsgID() == NetMsgType["msg_notify_gold_update"] then			print("update gold")						ModelPlayer.gold = resp.gold 			EventCenter_post(EventDef["ED_UPDATE_ROLE_INFO"], ModelPlayer)	elseif resp.getMsgID() == NetMsgType["msg_notify_emoney_update"] then 			print("update emoney")			ModelPlayer.emoney = resp.emoney 			EventCenter_post(EventDef["ED_UPDATE_ROLE_INFO"], ModelPlayer)	endend-- 金币变动NetSocket_registerHandler(NetMsgType["msg_notify_gold_update"], notify_gold_update(), Handle_update)-- 代币变动NetSocket_registerHandler(NetMsgType["msg_notify_emoney_update"], notify_emoney_update(), Handle_update)--注册玩家消息事件NetSocket_registerHandler(NetMsgType["msg_notify_roleinfo_msg"], notify_roleinfo_msg(), Handle_roleinfo_msg)--注册玩家背包事件NetSocket_registerHandler(NetMsgType["msg_notify_player_pack"], notify_player_pack(), Handle_player_pack_msg)