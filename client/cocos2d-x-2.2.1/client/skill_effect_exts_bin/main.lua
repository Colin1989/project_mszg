------------------------------------------------------------------------ 作者：hezhr-- 日期：2013-11-27-- 描述：脚本入口------------------------------------------------------------------------ 功  能：for CCLuaEngine traceback，异常出错信息-- 参  数：无-- 返回值：无返回值------------DEBUG = truefunction cclog(...)	if DEBUG == true then		print(...)			endendfunction __G__TRACKBACK__(msg)	cclog("---------------------------------------")	cclog("LUA ERROR:"..tostring(msg).."\n")	cclog(debug.traceback())	cclog("----------------------------------------")end------------------------------------------------------------------------ 全局变量LANGUAGE = "Cn"g_rootNode = CCScene:create()			-- 当前运行的游戏根节点g_sceneUIRoot = CCLayer:create()		-- 战斗UI场景父节点g_sceneRoot = CCLayer:create()			-- 战斗场景的父节点g_uiRoot = CCLayer:create()				-- 游戏界面的父节点------------------------------------------------------------------------ 功  能：每帧更新函数，有需要每帧执行的函数可以放在此模块内-- 参  数：dt - 时间间隔-- 返回值：无返回值local function update(dt)	NetSocket_update(dt)			-- 监听网络消息	UILayerDateUpdate(dt)			--UIManager需要时时更新的监听end----------------------------------------------------------------------function Handle_Socket_close (node)	print("断线了 要重连")end------------------------------------------------------------------------ 开始内存回收local function startCollectGarbage()	collectgarbage("restart")	collectgarbage("collect")	collectgarbage("setpause", 100)    collectgarbage("setstepmul", 5000)end------------------------------------------------------------------------ 停止垃圾回收local function stopCollectGarbage()	collectgarbage("stop")end------------------------------------------------------------------------ 功  能：主函数入口-- 参  数：无-- 返回值：无返回值local function main()	stopCollectGarbage()	-- 设置lua文件搜索路径	-- package.path = package.path..";Script/?.lua"			-- 方法1	CCFileUtils:sharedFileUtils():addSearchPath("Script")	-- 方法2	CCFileUtils:sharedFileUtils():addSearchPath("Script/Xml")	CCFileUtils:sharedFileUtils():addSearchPath("Script/Socket")	CCFileUtils:sharedFileUtils():addSearchPath("Script/Network")	CCFileUtils:sharedFileUtils():addSearchPath("Script/GameEvent")	CCFileUtils:sharedFileUtils():addSearchPath("Script/gamelayer")	CCFileUtils:sharedFileUtils():addSearchPath("Script/gamelayer/layerFight")	CCFileUtils:sharedFileUtils():addSearchPath("Script/gameModel")	CCFileUtils:sharedFileUtils():addSearchPath("Script/GameSkill")	CCFileUtils:sharedFileUtils():addSearchPath("Script/Friend")	CCFileUtils:sharedFileUtils():addSearchPath("Script/Task")	CCFileUtils:sharedFileUtils():addSearchPath("Script/gamelayer/Backpack")	CCFileUtils:sharedFileUtils():addSearchPath("Script/CommonLayer")	-- 设置第三方库搜索路径	package.cpath = package.cpath..";Lib/?.dll;Lib/?.so"	--print("package.path:"..package.path)	--print("package.cpath:"..package.cpath)	-- 设置资源搜索路径	CCFileUtils:sharedFileUtils():addSearchPath("Picture")	-- 图片	CCFileUtils:sharedFileUtils():addSearchPath("Picture/Instance")	-- 副本图片	CCFileUtils:sharedFileUtils():addSearchPath("Config")	-- 配置	CCFileUtils:sharedFileUtils():addSearchPath("Sound")	-- 声音	CCFileUtils:sharedFileUtils():addSearchPath("Data")		-- xml数据表	CCFileUtils:sharedFileUtils():addSearchPath("Font")		-- 字体	CCFileUtils:sharedFileUtils():addSearchPath("Layout")	-- 界面	CCFileUtils:sharedFileUtils():addSearchPath("Particle") --  	CCFileUtils:sharedFileUtils():addSearchPath("Picture/skill_effect")	CCFileUtils:sharedFileUtils():addSearchPath("Picture/monster")	CCFileUtils:sharedFileUtils():addSearchPath("Picture/Icon")	-- 设置屏幕设计分辨率尺寸	CCEGLView:sharedOpenGLView():setDesignResolutionSize(960, 640, kResolutionShowAll)    -- 开始运行场景	local startTm = os.time()	cclog("==================== start: "..startTm)	require "Require"	local endTm = os.time()	cclog("==================== end: "..endTm.." === diff: "..(endTm-startTm))	    g_rootNode:addChild(g_sceneRoot, g_Const_GameLayer.sceneLayer)	g_rootNode:addChild(g_sceneUIRoot, g_Const_GameLayer.sceneLayer)    g_rootNode:addChild(g_uiRoot, g_Const_GameLayer.uiLayer)	local runningScene = CCDirector:sharedDirector():getRunningScene()	if nil == runningScene then		CCDirector:sharedDirector():runWithScene(g_rootNode)	else		CCDirector:sharedDirector():replaceScene(g_rootNode)	end	-- 包含lua文件		--initGame(require"config")	-- 注册每帧调度函数	CCDirector:sharedDirector():getScheduler():scheduleScriptFunc(update, 0, false)	-- test http	-- Proxy:HttpSend(g_rootNode);	startCollectGarbage()		GameSkillTestLayer.create(g_sceneRoot)endfunction initGame(Config)	NetSocket_connect(Config.ip, Config.prot)	--建立连接 外网	Toast.initSysMsg()									--初始化系统消息	--UIManager.Create("UI_LvUp")	UIManager.Create("UI_Login")end----------------------------------------------------------------------xpcall(main, __G__TRACKBACK__)----------------------------------------------------------------------